{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,I,W,O,C,GCAO,SAAS,EAAkB,CAAQ,CAAE,CAAW,EACnD,GAAI,CAAE,CAAA,aAAoB,CAAA,EAAc,MAAM,AAAI,UAAU,oCAChE,C,G,E,Q,S,C,C,C,ECFA,SAAS,EAAkB,CAAM,CAAE,CAAK,EACpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAAK,CACnC,IAAI,EAAa,CAAK,CAAC,EAAE,AACzB,CAAA,EAAW,UAAU,CAAG,EAAW,UAAU,EAAI,CAAA,EACjD,EAAW,YAAY,CAAG,CAAA,EAEtB,UAAW,GAAY,CAAA,EAAW,QAAQ,CAAG,CAAA,CAAjD,EAEA,OAAO,cAAc,CAAC,EAAQ,EAAW,GAAG,CAAE,EAClD,CACJ,CACO,SAAS,EAAc,CAAW,CAAE,CAAU,CAAE,CAAW,EAI9D,OAHI,GAAY,EAAkB,EAAY,SAAS,CAAE,GACrD,GAAa,EAAkB,EAAa,GAEzC,CACX,C,E,E,O,C,I,W,O,C,E,G,I,E,E,S,E,E,SChBA,OAAQ,SAAU,CAAC,EAWlB,OAAO,gCAAgC,CAAG,WAAM,SAAA,EAyBlC,CAAM,E,A,C,E,E,C,A,E,I,C,GAElB,IACC,EAeG,EAfH,SAAA,CACA,EAcG,EAdH,WAAA,CACA,EAaG,EAbH,aAAA,CACA,EAYG,EAZH,UAAA,CAEA,GAUG,EAXH,qBAAA,CAWG,EAVH,WAAA,EACA,EASG,EATH,QAAA,CACA,EAQG,EARH,wBAAA,CACA,EAOG,EAPH,aAAA,CACA,EAMG,EANH,YAAA,CACA,EAKG,EALH,UAAA,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","sources":["<anon>","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","woocommerce/payment-gateway/assets/js/frontend/sv-wc-payment-gateway-google-pay.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequireb301\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequireb301\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"guLUH\", function(module, exports) {\n\n$parcel$export(module.exports, \"_\", function () { return $c0249d4a3fc9bb83$export$2996f80ef42b8419; });\nfunction $c0249d4a3fc9bb83$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n});\n\nparcelRegister(\"90XvN\", function(module, exports) {\n\n$parcel$export(module.exports, \"_\", function () { return $690246f0b6925227$export$d60067ff2358eee8; });\nfunction $690246f0b6925227$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $690246f0b6925227$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $690246f0b6925227$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $690246f0b6925227$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n});\n\n\nvar $guLUH = parcelRequire(\"guLUH\");\n\nvar $90XvN = parcelRequire(\"90XvN\");\njQuery(function($) {\n    \"use strict\";\n    /**\n\t * Google Pay handler.\n\t *\n\t * @since 5.10.0\n\t *\n\t * @type {SV_WC_Google_Pay_Handler_v5_12_1} object\n\t */ window.SV_WC_Google_Pay_Handler_v5_12_1 = /*#__PURE__*/ function() {\n        function SV_WC_Google_Pay_Handler_v5_12_1(params) {\n            (0, $guLUH._)(this, SV_WC_Google_Pay_Handler_v5_12_1);\n            var plugin_id = params.plugin_id, merchant_id = params.merchant_id, merchant_name = params.merchant_name, gateway_id = params.gateway_id, gateway_id_dasherized = params.gateway_id_dasherized, environment = params.environment, ajax_url = params.ajax_url, recalculate_totals_nonce = params.recalculate_totals_nonce, process_nonce = params.process_nonce, button_style = params.button_style, card_types = params.card_types, available_countries = params.available_countries, currency_code = params.currency_code, needs_shipping = params.needs_shipping, generic_error = params.generic_error;\n            this.gatewayID = gateway_id;\n            this.merchantID = merchant_id;\n            this.merchantName = merchant_name;\n            this.environment = environment;\n            this.ajaxURL = ajax_url;\n            this.recalculateTotalsNonce = recalculate_totals_nonce;\n            this.processNonce = process_nonce;\n            this.buttonStyle = button_style;\n            this.availableCountries = available_countries;\n            this.currencyCode = currency_code;\n            this.needsShipping = needs_shipping;\n            this.genericError = generic_error;\n            if (params.product_id) this.productID = params.product_id;\n            /**\n\t\t\t * Card networks supported by your site and your gateway\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n\t\t\t */ var allowedCardNetworks = card_types;\n            /**\n\t\t\t * Define the version of the Google Pay API referenced when creating your configuration\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#PaymentDataRequest|apiVersion in PaymentDataRequest}\n\t\t\t */ this.baseRequest = {\n                apiVersion: 2,\n                apiVersionMinor: 0\n            };\n            /**\n\t\t\t * Card authentication methods supported by your site and your gateway\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n\t\t\t *\n\t\t\t * @todo confirm your processor supports Android device tokens for your supported card networks\n\t\t\t */ var allowedCardAuthMethods = [\n                \"PAN_ONLY\",\n                \"CRYPTOGRAM_3DS\"\n            ];\n            /**\n\t\t\t * Identify your gateway and your site's gateway merchant identifier\n\t\t\t *\n\t\t\t * The Google Pay API response will return an encrypted payment method capable\n\t\t\t * of being charged by a supported gateway after payer authorization\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#gateway|PaymentMethodTokenizationSpecification}\n\t\t\t */ var tokenizationSpecification = {\n                type: \"PAYMENT_GATEWAY\",\n                parameters: {\n                    \"gateway\": plugin_id,\n                    \"gatewayMerchantId\": this.merchantID\n                }\n            };\n            /**\n\t\t\t * Describe your site's support for the CARD payment method and its required fields\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n\t\t\t */ this.baseCardPaymentMethod = {\n                type: \"CARD\",\n                parameters: {\n                    allowedAuthMethods: allowedCardAuthMethods,\n                    allowedCardNetworks: allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: \"FULL\",\n                        phoneNumberRequired: true\n                    }\n                }\n            };\n            /**\n\t\t\t * Describe your site's support for the CARD payment method including optional fields\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n\t\t\t */ this.cardPaymentMethod = Object.assign({}, this.baseCardPaymentMethod, {\n                tokenizationSpecification: tokenizationSpecification\n            });\n            /**\n\t\t\t * An initialized google.payments.api.PaymentsClient object or null if not yet set\n\t\t\t *\n\t\t\t * @see {@link getGooglePaymentsClient}\n\t\t\t */ this.paymentsClient = null;\n        }\n        (0, $90XvN._)(SV_WC_Google_Pay_Handler_v5_12_1, [\n            {\n                /**\n\t\t * Configure your site's support for payment methods supported by the Google Pay\n\t\t * API.\n\t\t *\n\t\t * Each member of allowedPaymentMethods should contain only the required fields,\n\t\t * allowing reuse of this base request when determining a viewer's ability\n\t\t * to pay and later requesting a supported payment method\n\t\t *\n\t\t * @returns {object} Google Pay API version, payment methods supported by the site\n\t\t */ key: \"getGoogleIsReadyToPayRequest\",\n                value: function getGoogleIsReadyToPayRequest() {\n                    return Object.assign({}, this.baseRequest, {\n                        allowedPaymentMethods: [\n                            this.baseCardPaymentMethod\n                        ]\n                    });\n                }\n            },\n            {\n                /**\n\t\t * Configure support for the Google Pay API\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#PaymentDataRequest|PaymentDataRequest}\n\t\t *\n\t\t * @param {function} resolve callback\n\t\t * @returns {object} PaymentDataRequest fields\n\t\t */ key: \"getGooglePaymentDataRequest\",\n                value: function getGooglePaymentDataRequest(resolve) {\n                    var _this = this;\n                    return this.getGoogleTransactionInfo(function(transactionInfo) {\n                        var paymentDataRequest = Object.assign({}, _this.baseRequest);\n                        paymentDataRequest.allowedPaymentMethods = [\n                            _this.cardPaymentMethod\n                        ];\n                        paymentDataRequest.transactionInfo = transactionInfo;\n                        paymentDataRequest.merchantInfo = {\n                            merchantId: _this.merchantID,\n                            merchantName: _this.merchantName\n                        };\n                        paymentDataRequest.emailRequired = true;\n                        paymentDataRequest.callbackIntents = [\n                            \"PAYMENT_AUTHORIZATION\"\n                        ];\n                        if (_this.needsShipping) {\n                            paymentDataRequest.callbackIntents = [\n                                \"SHIPPING_ADDRESS\",\n                                \"SHIPPING_OPTION\",\n                                \"PAYMENT_AUTHORIZATION\"\n                            ];\n                            paymentDataRequest.shippingAddressRequired = true;\n                            paymentDataRequest.shippingAddressParameters = _this.getGoogleShippingAddressParameters();\n                            paymentDataRequest.shippingOptionRequired = true;\n                        }\n                        resolve(paymentDataRequest);\n                    });\n                }\n            },\n            {\n                /**\n\t\t * Return an active PaymentsClient or initialize\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/client#PaymentsClient|PaymentsClient constructor}\n\t\t * @returns {google.payments.api.PaymentsClient} Google Pay API client\n\t\t */ key: \"getGooglePaymentsClient\",\n                value: function getGooglePaymentsClient() {\n                    var _this = this;\n                    if (this.paymentsClient === null) {\n                        var args = {\n                            environment: this.environment,\n                            merchantInfo: {\n                                merchantName: this.merchantName,\n                                merchantId: this.merchantID\n                            },\n                            paymentDataCallbacks: {\n                                onPaymentAuthorized: function(paymentData) {\n                                    return _this.onPaymentAuthorized(paymentData);\n                                }\n                            }\n                        };\n                        if (this.needsShipping) args.paymentDataCallbacks.onPaymentDataChanged = function(paymentData) {\n                            return _this.onPaymentDataChanged(paymentData);\n                        };\n                        this.paymentsClient = new google.payments.api.PaymentsClient(args);\n                    }\n                    return this.paymentsClient;\n                }\n            },\n            {\n                /**\n\t\t * Handles payment authorization callback intent.\n\t\t *\n\t\t * @param {object} paymentData response from Google Pay API after a payer approves payment.\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentData|PaymentData object reference}\n\t\t *\n\t\t * @returns Promise<{object}> Promise object to complete or fail the transaction.\n\t\t */ key: \"onPaymentAuthorized\",\n                value: function onPaymentAuthorized(paymentData) {\n                    var _this = this;\n                    this.blockUI();\n                    return new Promise(function(resolve, reject) {\n                        // handle the response\n                        try {\n                            _this.processPayment(paymentData, resolve);\n                        } catch (err) {\n                            reject({\n                                transactionState: \"ERROR\",\n                                error: {\n                                    intent: \"PAYMENT_AUTHORIZATION\",\n                                    message: \"Payment could not be processed\",\n                                    reason: \"PAYMENT_DATA_INVALID\"\n                                }\n                            });\n                        }\n                        _this.unblockUI();\n                    });\n                }\n            },\n            {\n                /**\n\t\t * Handles dynamic buy flow shipping address and shipping options callback intents.\n\t\t *\n\t\t * @param {object} intermediatePaymentData response from Google Pay API a shipping address or shipping option is selected in the payment sheet.\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#IntermediatePaymentData|IntermediatePaymentData object reference}\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentDataRequestUpdate|PaymentDataRequestUpdate}\n\t\t * @returns Promise<{object}> Promise of PaymentDataRequestUpdate object to update the payment sheet.\n\t\t */ key: \"onPaymentDataChanged\",\n                value: function onPaymentDataChanged(intermediatePaymentData) {\n                    var _this = this;\n                    this.blockUI();\n                    return new Promise(function(resolve, reject) {\n                        try {\n                            var shippingAddress = intermediatePaymentData.shippingAddress;\n                            var shippingOptionData = intermediatePaymentData.shippingOptionData;\n                            var chosenShippingMethod = \"\";\n                            if (intermediatePaymentData.callbackTrigger == \"SHIPPING_OPTION\") chosenShippingMethod = shippingOptionData.id;\n                            _this.getUpdatedTotals(shippingAddress, chosenShippingMethod, function(paymentDataRequestUpdate) {\n                                if (paymentDataRequestUpdate.newShippingOptionParameters.shippingOptions.length == 0) paymentDataRequestUpdate = {\n                                    error: _this.getGoogleUnserviceableAddressError()\n                                };\n                                resolve(paymentDataRequestUpdate);\n                            });\n                        } catch (err) {\n                            _this.failPayment(\"Could not load updated totals or process payment data request update. \" + err);\n                        }\n                        _this.unblockUI();\n                    });\n                }\n            },\n            {\n                /**\n\t\t * Provide Google Pay API with a payment amount, currency, and amount status\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#TransactionInfo|TransactionInfo}\n\t\t *\n\t\t * @param {function} resolve callback\n\t\t * @returns {object} transaction info, suitable for use as transactionInfo property of PaymentDataRequest\n\t\t */ key: \"getGoogleTransactionInfo\",\n                value: function getGoogleTransactionInfo(resolve) {\n                    var _this = this;\n                    // get transaction info from cart\n                    var data = {\n                        action: \"wc_\".concat(this.gatewayID, \"_google_pay_get_transaction_info\")\n                    };\n                    if (this.productID) data.productID = this.productID;\n                    $.post(this.ajaxURL, data, function(response) {\n                        if (response.success) resolve(JSON.parse(response.data));\n                        else _this.failPayment(\"Could not build transaction info. \" + response.data.message);\n                    });\n                }\n            },\n            {\n                /**\n\t\t * Get updated totals and shipping options via AJAX for use in the PaymentDataRequest\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentDataRequestUpdate|PaymentDataRequestUpdate}\n\t\t *\n\t\t * @param {object} shippingAddress shipping address\n\t\t * @param {object} shippingMethod chosen shipping method\n\t\t * @param {function} resolve callback\n\t\t */ key: \"getUpdatedTotals\",\n                value: function getUpdatedTotals(shippingAddress, shippingMethod, resolve) {\n                    var _this = this;\n                    var data = {\n                        action: \"wc_\".concat(this.gatewayID, \"_google_pay_recalculate_totals\"),\n                        \"nonce\": this.recalculateTotalsNonce,\n                        shippingAddress: shippingAddress,\n                        shippingMethod: shippingMethod\n                    };\n                    if (this.productID) data.productID = this.productID;\n                    $.post(this.ajaxURL, data, function(response) {\n                        if (response.success) resolve(JSON.parse(response.data));\n                        else _this.failPayment(\"Could not recalculate totals. \" + response.data.message);\n                    });\n                }\n            },\n            {\n                /**\n\t\t * Provide Google Pay API with shipping address parameters when using dynamic buy flow.\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#ShippingAddressParameters|ShippingAddressParameters}\n\t\t * @returns {object} shipping address details, suitable for use as shippingAddressParameters property of PaymentDataRequest\n\t\t */ key: \"getGoogleShippingAddressParameters\",\n                value: function getGoogleShippingAddressParameters() {\n                    return {\n                        allowedCountryCodes: this.availableCountries\n                    };\n                }\n            },\n            {\n                /**\n\t\t * Provide Google Pay API with a payment data error.\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentDataError|PaymentDataError}\n\t\t * @returns {object} payment data error, suitable for use as error property of PaymentDataRequestUpdate\n\t\t */ key: \"getGoogleUnserviceableAddressError\",\n                value: function getGoogleUnserviceableAddressError() {\n                    return {\n                        reason: \"SHIPPING_ADDRESS_UNSERVICEABLE\",\n                        message: \"Cannot ship to the selected address\",\n                        intent: \"SHIPPING_ADDRESS\"\n                    };\n                }\n            },\n            {\n                /**\n\t\t * Add a Google Pay purchase button alongside an existing checkout button\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#ButtonOptions|Button options}\n\t\t * @see {@link https://developers.google.com/pay/api/web/guides/brand-guidelines|Google Pay brand guidelines}\n\t\t */ key: \"addGooglePayButton\",\n                value: function addGooglePayButton() {\n                    var _this = this;\n                    var paymentsClient = this.getGooglePaymentsClient();\n                    var button = paymentsClient.createButton({\n                        onClick: function(event) {\n                            return _this.onGooglePaymentButtonClicked(event);\n                        },\n                        buttonColor: this.buttonStyle,\n                        buttonSizeMode: \"fill\"\n                    });\n                    document.getElementById(\"sv-wc-google-pay-button-container\").appendChild(button);\n                }\n            },\n            {\n                /**\n\t\t * Prefetch payment data to improve performance\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/client#prefetchPaymentData|prefetchPaymentData()}\n\t\t */ key: \"prefetchGooglePaymentData\",\n                value: function prefetchGooglePaymentData() {\n                    var _this = this;\n                    this.getGooglePaymentDataRequest(function(paymentDataRequest) {\n                        // transactionInfo must be set but does not affect cache\n                        paymentDataRequest.transactionInfo = {\n                            totalPriceStatus: \"NOT_CURRENTLY_KNOWN\",\n                            currencyCode: _this.currencyCode\n                        };\n                        var paymentsClient = _this.getGooglePaymentsClient();\n                        paymentsClient.prefetchPaymentData(paymentDataRequest);\n                    });\n                }\n            },\n            {\n                /**\n\t\t * Process payment data returned by the Google Pay API\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentData|PaymentData object reference}\n\t\t *\n\t\t * @param {object} paymentData response from Google Pay API after user approves payment\n\t\t * @param {function} resolve callback\n\t\t */ key: \"processPayment\",\n                value: function processPayment(paymentData, resolve) {\n                    var _this = this;\n                    // pass payment token to your gateway to process payment\n                    var data = {\n                        action: \"wc_\".concat(this.gatewayID, \"_google_pay_process_payment\"),\n                        nonce: this.processNonce,\n                        paymentData: JSON.stringify(paymentData)\n                    };\n                    if (this.productID && !this.needsShipping) data.productID = this.productID;\n                    return $.post(this.ajaxURL, data, function(response) {\n                        if (response.success) {\n                            resolve({\n                                transactionState: \"SUCCESS\"\n                            });\n                            window.location = response.data.redirect;\n                        } else {\n                            resolve({\n                                transactionState: \"ERROR\",\n                                error: {\n                                    intent: \"SHIPPING_ADDRESS\",\n                                    message: \"Invalid data\",\n                                    reason: \"PAYMENT_DATA_INVALID\"\n                                }\n                            });\n                            _this.failPayment(\"Payment could not be processed. \" + response.data.message);\n                        }\n                    });\n                }\n            },\n            {\n                /**\n\t\t * Show Google Pay payment sheet when Google Pay payment button is clicked\n\t\t */ key: \"onGooglePaymentButtonClicked\",\n                value: function onGooglePaymentButtonClicked(event) {\n                    var _this = this;\n                    event.preventDefault();\n                    this.blockUI();\n                    this.getGooglePaymentDataRequest(function(paymentDataRequest) {\n                        var paymentsClient = _this.getGooglePaymentsClient();\n                        try {\n                            paymentsClient.loadPaymentData(paymentDataRequest);\n                        } catch (err) {\n                            _this.failPayment(\"Could not load payment data. \" + err);\n                        }\n                        _this.unblockUI();\n                    });\n                }\n            },\n            {\n                /**\n\t\t * Initialize Google PaymentsClient after Google-hosted JavaScript has loaded\n\t\t *\n\t\t * Display a Google Pay payment button after confirmation of the viewer's\n\t\t * ability to pay.\n\t\t */ key: \"init\",\n                value: function init() {\n                    // initialize for the various pages\n                    if ($(\"form.cart\").length) this.initProductPage();\n                    else if ($(\"form.woocommerce-cart-form\").length) this.initCartPage();\n                    else if ($(\"form.woocommerce-checkout\").length) this.initCheckoutPage();\n                    else return;\n                    this.initGooglePay();\n                }\n            },\n            {\n                /**\n\t\t * Initializes Google Pay.\n\t\t */ key: \"initGooglePay\",\n                value: function initGooglePay() {\n                    var _this = this;\n                    var paymentsClient = this.getGooglePaymentsClient();\n                    paymentsClient.isReadyToPay(this.getGoogleIsReadyToPayRequest()).then(function(response) {\n                        if (response.result) {\n                            _this.addGooglePayButton();\n                            // prefetch payment data to improve performance\n                            _this.prefetchGooglePaymentData();\n                        }\n                    }).catch(function(err) {\n                        _this.failPayment(\"Google Pay is not ready. \" + err);\n                    });\n                }\n            },\n            {\n                /**\n\t\t * Initializes the product page.\n\t\t */ key: \"initProductPage\",\n                value: function initProductPage() {\n                    this.uiElement = $(\"form.cart\");\n                }\n            },\n            {\n                /**\n\t\t * Initializes the cart page.\n\t\t */ key: \"initCartPage\",\n                value: function initCartPage() {\n                    var _this = this;\n                    this.uiElement = $(\"form.woocommerce-cart-form\").parents(\"div.woocommerce\");\n                    // re-init if the cart totals are updated\n                    $(document.body).on(\"updated_cart_totals\", function() {\n                        _this.initGooglePay();\n                    });\n                }\n            },\n            {\n                /**\n\t\t * Initializes the checkout page.\n\t\t */ key: \"initCheckoutPage\",\n                value: function initCheckoutPage() {\n                    this.uiElement = $(\"form.woocommerce-checkout\");\n                }\n            },\n            {\n                /**\n\t\t * Fails the purchase based on the gateway result.\n\t\t */ key: \"failPayment\",\n                value: function failPayment(error) {\n                    console.error(\"[Google Pay] \" + error);\n                    this.unblockUI();\n                    this.renderErrors([\n                        this.genericError\n                    ]);\n                }\n            },\n            {\n                /**\n\t\t * Renders any new errors and bring them into the viewport.\n \t\t */ key: \"renderErrors\",\n                value: function renderErrors(errors) {\n                    // hide and remove any previous errors\n                    $(\".woocommerce-error, .woocommerce-message\").remove();\n                    // add errors\n                    this.uiElement.prepend('<ul class=\"woocommerce-error\"><li>' + errors.join(\"</li><li>\") + \"</li></ul>\");\n                    // unblock UI\n                    this.uiElement.removeClass(\"processing\").unblock();\n                    // scroll to top\n                    $(\"html, body\").animate({\n                        scrollTop: this.uiElement.offset().top - 100\n                    }, 1000);\n                }\n            },\n            {\n                /**\n\t\t * Blocks the payment form UI.\n\t\t */ key: \"blockUI\",\n                value: function blockUI() {\n                    this.uiElement.block({\n                        message: null,\n                        overlayCSS: {\n                            background: \"#fff\",\n                            opacity: 0.6\n                        }\n                    });\n                }\n            },\n            {\n                /**\n\t\t * Unblocks the payment form UI.\n\t\t */ key: \"unblockUI\",\n                value: function unblockUI() {\n                    this.uiElement.unblock();\n                }\n            }\n        ]);\n        return SV_WC_Google_Pay_Handler_v5_12_1;\n    }();\n    $(document.body).trigger(\"sv_wc_google_pay_handler_v5_12_1_loaded\");\n});\n\n\n//# sourceMappingURL=sv-wc-payment-gateway-google-pay.js.map\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","jQuery( function( $ ) {\n\n\t\"use strict\"\n\n\t/**\n\t * Google Pay handler.\n\t *\n\t * @since 5.10.0\n\t *\n\t * @type {SV_WC_Google_Pay_Handler_v5_12_1} object\n\t */\n\twindow.SV_WC_Google_Pay_Handler_v5_12_1 = class SV_WC_Google_Pay_Handler_v5_12_1 {\n\n\t\t/**\n\t\t * Handler constructor.\n\t\t *\n\t\t * @since 5.10.0\n\t\t *\n\t\t * @param {Object} params The plugin ID\n\t\t * @param {string} params.plugin_id The plugin ID\n\t\t * @param {string} params.merchant_id The merchant ID\n\t\t * @param {string} params.merchant_name The site name\n\t\t * @param {string} params.gateway_id The gateway ID\n\t\t * @param {string} params.gateway_id_dasherized The gateway ID dasherized\n\t\t * @param {string} params.environment The gateway environment (PRODUCTION or TEST)\n\t\t * @param {string} params.ajax_url The AJAX URL\n\t\t * @param {string} params.recalculate_totals_nonce Nonce for the recalculate_totals AJAX action\n\t\t * @param {string} params.process_nonce Nonce for the process AJAX action\n\t\t * @param {string} params.button_style The button style\n\t\t * @param {string[]} params.card_types The supported card types\n\t\t * @param {string[]} params.available_countries Array of two-letter country codes the gateway is available for\n\t\t * @param {string[]} params.currency_code WC configured currency\n\t\t * @param {boolean} params.needs_shipping Whether or not the cart or product needs shipping\n\t\t * @param {string} params.generic_error The generic error message\n\t\t * @param {string} params.product_id The product ID if we are on a Product page\n\t\t */\n\t\tconstructor( params ) {\n\n\t\t\tlet {\n\t\t\t\tplugin_id,\n\t\t\t\tmerchant_id,\n\t\t\t\tmerchant_name,\n\t\t\t\tgateway_id,\n\t\t\t\tgateway_id_dasherized,\n\t\t\t\tenvironment,\n\t\t\t\tajax_url,\n\t\t\t\trecalculate_totals_nonce,\n\t\t\t\tprocess_nonce,\n\t\t\t\tbutton_style,\n\t\t\t\tcard_types,\n\t\t\t\tavailable_countries,\n\t\t\t\tcurrency_code,\n\t\t\t\tneeds_shipping,\n\t\t\t\tgeneric_error\n\t\t\t} = params;\n\n\t\t\tthis.gatewayID              = gateway_id;\n\t\t\tthis.merchantID             = merchant_id;\n\t\t\tthis.merchantName           = merchant_name;\n\t\t\tthis.environment            = environment;\n\t\t\tthis.ajaxURL                = ajax_url;\n\t\t\tthis.recalculateTotalsNonce = recalculate_totals_nonce;\n\t\t\tthis.processNonce           = process_nonce;\n\t\t\tthis.buttonStyle            = button_style;\n\t\t\tthis.availableCountries     = available_countries;\n\t\t\tthis.currencyCode           = currency_code;\n\t\t\tthis.needsShipping          = needs_shipping;\n\t\t\tthis.genericError           = generic_error;\n\n\t\t\tif ( params.product_id ) {\n\t\t\t\tthis.productID = params.product_id;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Card networks supported by your site and your gateway\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n\t\t\t */\n\t\t\tconst allowedCardNetworks = card_types;\n\n\t\t\t/**\n\t\t\t * Define the version of the Google Pay API referenced when creating your configuration\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#PaymentDataRequest|apiVersion in PaymentDataRequest}\n\t\t\t */\n\t\t\tthis.baseRequest = {\n\t\t\t\tapiVersion: 2,\n\t\t\t\tapiVersionMinor: 0\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Card authentication methods supported by your site and your gateway\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n\t\t\t *\n\t\t\t * @todo confirm your processor supports Android device tokens for your supported card networks\n\t\t\t */\n\t\t\tconst allowedCardAuthMethods = [ 'PAN_ONLY', 'CRYPTOGRAM_3DS' ];\n\n\t\t\t/**\n\t\t\t * Identify your gateway and your site's gateway merchant identifier\n\t\t\t *\n\t\t\t * The Google Pay API response will return an encrypted payment method capable\n\t\t\t * of being charged by a supported gateway after payer authorization\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#gateway|PaymentMethodTokenizationSpecification}\n\t\t\t */\n\t\t\tconst tokenizationSpecification = {\n\t\t\t\ttype: 'PAYMENT_GATEWAY',\n\t\t\t\tparameters: {\n\t\t\t\t\t'gateway': plugin_id,\n\t\t\t\t\t'gatewayMerchantId': this.merchantID\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Describe your site's support for the CARD payment method and its required fields\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n\t\t\t */\n\t\t\tthis.baseCardPaymentMethod = {\n\t\t\t\ttype: 'CARD',\n\t\t\t\tparameters: {\n\t\t\t\t\tallowedAuthMethods: allowedCardAuthMethods,\n\t\t\t\t\tallowedCardNetworks: allowedCardNetworks,\n\t\t\t\t\tbillingAddressRequired: true,\n\t\t\t\t\tbillingAddressParameters: {\n\t\t\t\t\t\tformat: 'FULL',\n\t\t\t\t\t\tphoneNumberRequired: true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Describe your site's support for the CARD payment method including optional fields\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n\t\t\t */\n\t\t\tthis.cardPaymentMethod = Object.assign(\n\t\t\t\t{},\n\t\t\t\tthis.baseCardPaymentMethod,\n\t\t\t\t{\n\t\t\t\t\ttokenizationSpecification: tokenizationSpecification\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t/**\n\t\t\t * An initialized google.payments.api.PaymentsClient object or null if not yet set\n\t\t\t *\n\t\t\t * @see {@link getGooglePaymentsClient}\n\t\t\t */\n\t\t\tthis.paymentsClient = null;\n\t\t}\n\n\t\t/**\n\t\t * Configure your site's support for payment methods supported by the Google Pay\n\t\t * API.\n\t\t *\n\t\t * Each member of allowedPaymentMethods should contain only the required fields,\n\t\t * allowing reuse of this base request when determining a viewer's ability\n\t\t * to pay and later requesting a supported payment method\n\t\t *\n\t\t * @returns {object} Google Pay API version, payment methods supported by the site\n\t\t */\n\t\tgetGoogleIsReadyToPayRequest() {\n\n\t\t\treturn Object.assign(\n\t\t\t\t{},\n\t\t\t\tthis.baseRequest,\n\t\t\t\t{\n\t\t\t\t\tallowedPaymentMethods: [ this.baseCardPaymentMethod ]\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Configure support for the Google Pay API\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#PaymentDataRequest|PaymentDataRequest}\n\t\t *\n\t\t * @param {function} resolve callback\n\t\t * @returns {object} PaymentDataRequest fields\n\t\t */\n\t\tgetGooglePaymentDataRequest( resolve ) {\n\n\t\t\treturn this.getGoogleTransactionInfo( ( transactionInfo ) => {\n\n\t\t\t\tconst paymentDataRequest = Object.assign( {}, this.baseRequest );\n\t\t\t\tpaymentDataRequest.allowedPaymentMethods = [ this.cardPaymentMethod ];\n\t\t\t\tpaymentDataRequest.transactionInfo = transactionInfo;\n\t\t\t\tpaymentDataRequest.merchantInfo = {\n\t\t\t\t\tmerchantId: this.merchantID,\n\t\t\t\t\tmerchantName: this.merchantName\n\t\t\t\t};\n\n\t\t\t\tpaymentDataRequest.emailRequired = true;\n\t\t\t\tpaymentDataRequest.callbackIntents = [ 'PAYMENT_AUTHORIZATION' ];\n\n\t\t\t\tif ( this.needsShipping ) {\n\t\t\t\t\tpaymentDataRequest.callbackIntents = [ 'SHIPPING_ADDRESS', 'SHIPPING_OPTION', 'PAYMENT_AUTHORIZATION' ];\n\t\t\t\t\tpaymentDataRequest.shippingAddressRequired = true;\n\t\t\t\t\tpaymentDataRequest.shippingAddressParameters = this.getGoogleShippingAddressParameters();\n\t\t\t\t\tpaymentDataRequest.shippingOptionRequired = true;\n\t\t\t\t}\n\n\t\t\t\tresolve( paymentDataRequest );\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Return an active PaymentsClient or initialize\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/client#PaymentsClient|PaymentsClient constructor}\n\t\t * @returns {google.payments.api.PaymentsClient} Google Pay API client\n\t\t */\n\t\tgetGooglePaymentsClient() {\n\t\t\tif ( this.paymentsClient === null ) {\n\t\t\t\tlet args = {\n\t\t\t\t\tenvironment: this.environment,\n\t\t\t\t\tmerchantInfo: {\n\t\t\t\t\t\tmerchantName: this.merchantName,\n\t\t\t\t\t\tmerchantId: this.merchantID\n\t\t\t\t\t},\n\t\t\t\t\tpaymentDataCallbacks: {\n\t\t\t\t\t\tonPaymentAuthorized: ( paymentData ) => this.onPaymentAuthorized( paymentData ),\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tif ( this.needsShipping ) {\n\t\t\t\t\targs.paymentDataCallbacks.onPaymentDataChanged = ( paymentData ) => this.onPaymentDataChanged( paymentData );\n\t\t\t\t}\n\n\t\t\t\tthis.paymentsClient = new google.payments.api.PaymentsClient( args );\n\t\t\t}\n\t\t\treturn this.paymentsClient;\n\t\t}\n\n\t\t/**\n\t\t * Handles payment authorization callback intent.\n\t\t *\n\t\t * @param {object} paymentData response from Google Pay API after a payer approves payment.\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentData|PaymentData object reference}\n\t\t *\n\t\t * @returns Promise<{object}> Promise object to complete or fail the transaction.\n\t\t */\n\t\tonPaymentAuthorized( paymentData ) {\n\n\t\t\tthis.blockUI();\n\n\t\t\treturn new Promise( (resolve, reject) => {\n\n\t\t\t\t// handle the response\n\t\t\t\ttry {\n\t\t\t\t\tthis.processPayment( paymentData, resolve );\n\t\t\t\t}\tcatch( err ) {\n\t\t\t\t\treject( {\n\t\t\t\t\t\ttransactionState: 'ERROR',\n\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\tintent: 'PAYMENT_AUTHORIZATION',\n\t\t\t\t\t\t\tmessage: 'Payment could not be processed',\n\t\t\t\t\t\t\treason: 'PAYMENT_DATA_INVALID'\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tthis.unblockUI();\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Handles dynamic buy flow shipping address and shipping options callback intents.\n\t\t *\n\t\t * @param {object} intermediatePaymentData response from Google Pay API a shipping address or shipping option is selected in the payment sheet.\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#IntermediatePaymentData|IntermediatePaymentData object reference}\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentDataRequestUpdate|PaymentDataRequestUpdate}\n\t\t * @returns Promise<{object}> Promise of PaymentDataRequestUpdate object to update the payment sheet.\n\t\t */\n\t\tonPaymentDataChanged( intermediatePaymentData ) {\n\n\t\t\tthis.blockUI();\n\n\t\t\treturn new Promise(( resolve, reject ) => {\n\n\t\t\t\ttry {\n\t\t\t\t\tlet shippingAddress = intermediatePaymentData.shippingAddress;\n\t\t\t\t\tlet shippingOptionData = intermediatePaymentData.shippingOptionData;\n\t\t\t\t\tlet chosenShippingMethod = '';\n\n\t\t\t\t\tif ( intermediatePaymentData.callbackTrigger == 'SHIPPING_OPTION' ) {\n\t\t\t\t\t\tchosenShippingMethod = shippingOptionData.id;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.getUpdatedTotals( shippingAddress, chosenShippingMethod, ( paymentDataRequestUpdate ) => {\n\n\t\t\t\t\t\tif ( paymentDataRequestUpdate.newShippingOptionParameters.shippingOptions.length == 0 ) {\n\t\t\t\t\t\t\tpaymentDataRequestUpdate = {\n\t\t\t\t\t\t\t\terror: this.getGoogleUnserviceableAddressError()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve( paymentDataRequestUpdate );\n\t\t\t\t\t} );\n\n\t\t\t\t}\tcatch( err ) {\n\t\t\t\t\tthis.failPayment( 'Could not load updated totals or process payment data request update. ' + err );\n\t\t\t\t}\n\n\t\t\t\tthis.unblockUI();\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Provide Google Pay API with a payment amount, currency, and amount status\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#TransactionInfo|TransactionInfo}\n\t\t *\n\t\t * @param {function} resolve callback\n\t\t * @returns {object} transaction info, suitable for use as transactionInfo property of PaymentDataRequest\n\t\t */\n\t\tgetGoogleTransactionInfo( resolve ) {\n\n\t\t\t// get transaction info from cart\n\t\t\tconst data = {\n\t\t\t\taction: `wc_${this.gatewayID}_google_pay_get_transaction_info`,\n\t\t\t}\n\n\t\t\tif ( this.productID ) {\n\t\t\t\tdata.productID = this.productID;\n\t\t\t}\n\n\t\t\t$.post( this.ajaxURL, data, ( response ) => {\n\n\t\t\t\tif ( response.success ) {\n\t\t\t\t\tresolve( JSON.parse( response.data ) )\n\t\t\t\t} else {\n\t\t\t\t\tthis.failPayment( 'Could not build transaction info. ' + response.data.message );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Get updated totals and shipping options via AJAX for use in the PaymentDataRequest\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentDataRequestUpdate|PaymentDataRequestUpdate}\n\t\t *\n\t\t * @param {object} shippingAddress shipping address\n\t\t * @param {object} shippingMethod chosen shipping method\n\t\t * @param {function} resolve callback\n\t\t */\n\t\tgetUpdatedTotals( shippingAddress, shippingMethod, resolve ) {\n\n\t\t\tconst data = {\n\t\t\t\taction: `wc_${this.gatewayID}_google_pay_recalculate_totals`,\n\t\t\t\t'nonce': this.recalculateTotalsNonce,\n\t\t\t\tshippingAddress,\n\t\t\t\tshippingMethod\n\t\t\t}\n\n\t\t\tif ( this.productID ) {\n\t\t\t\tdata.productID = this.productID;\n\t\t\t}\n\n\t\t\t$.post( this.ajaxURL, data, ( response ) => {\n\n\t\t\t\tif ( response.success ) {\n\t\t\t\t\tresolve( JSON.parse( response.data ) )\n\t\t\t\t} else {\n\t\t\t\t\tthis.failPayment( 'Could not recalculate totals. ' + response.data.message );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Provide Google Pay API with shipping address parameters when using dynamic buy flow.\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#ShippingAddressParameters|ShippingAddressParameters}\n\t\t * @returns {object} shipping address details, suitable for use as shippingAddressParameters property of PaymentDataRequest\n\t\t */\n\t\tgetGoogleShippingAddressParameters() {\n\n\t\t\treturn {\n\t\t\t\tallowedCountryCodes: this.availableCountries\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Provide Google Pay API with a payment data error.\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentDataError|PaymentDataError}\n\t\t * @returns {object} payment data error, suitable for use as error property of PaymentDataRequestUpdate\n\t\t */\n\t\tgetGoogleUnserviceableAddressError() {\n\t\t\treturn {\n\t\t\t\treason: 'SHIPPING_ADDRESS_UNSERVICEABLE',\n\t\t\t\tmessage: 'Cannot ship to the selected address',\n\t\t\t\tintent: 'SHIPPING_ADDRESS'\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Add a Google Pay purchase button alongside an existing checkout button\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#ButtonOptions|Button options}\n\t\t * @see {@link https://developers.google.com/pay/api/web/guides/brand-guidelines|Google Pay brand guidelines}\n\t\t */\n\t\taddGooglePayButton() {\n\n\t\t\tconst paymentsClient = this.getGooglePaymentsClient();\n\t\t\tconst button = paymentsClient.createButton( {\n\t\t\t\tonClick: ( event ) => this.onGooglePaymentButtonClicked( event ),\n\t\t\t\tbuttonColor: this.buttonStyle,\n\t\t\t\tbuttonSizeMode: 'fill'\n\t\t\t} );\n\t\t\tdocument.getElementById( 'sv-wc-google-pay-button-container' ).appendChild( button );\n\t\t}\n\n\t\t/**\n\t\t * Prefetch payment data to improve performance\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/client#prefetchPaymentData|prefetchPaymentData()}\n\t\t */\n\t\tprefetchGooglePaymentData() {\n\n\t\t\tthis.getGooglePaymentDataRequest( ( paymentDataRequest ) => {\n\n\t\t\t\t// transactionInfo must be set but does not affect cache\n\t\t\t\tpaymentDataRequest.transactionInfo = {\n\t\t\t\t\ttotalPriceStatus: 'NOT_CURRENTLY_KNOWN',\n\t\t\t\t\tcurrencyCode: this.currencyCode\n\t\t\t\t};\n\t\t\t\tconst paymentsClient = this.getGooglePaymentsClient();\n\t\t\t\tpaymentsClient.prefetchPaymentData( paymentDataRequest );\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Process payment data returned by the Google Pay API\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentData|PaymentData object reference}\n\t\t *\n\t\t * @param {object} paymentData response from Google Pay API after user approves payment\n\t\t * @param {function} resolve callback\n\t\t */\n\t\tprocessPayment( paymentData, resolve ) {\n\n\t\t\t// pass payment token to your gateway to process payment\n\t\t\tconst data = {\n\t\t\t\taction: `wc_${this.gatewayID}_google_pay_process_payment`,\n\t\t\t\tnonce: this.processNonce,\n\t\t\t\tpaymentData: JSON.stringify( paymentData ),\n\t\t\t}\n\n\t\t\tif ( this.productID && ! this.needsShipping ) {\n\t\t\t\tdata.productID = this.productID;\n\t\t\t}\n\n\t\t\treturn $.post( this.ajaxURL, data, ( response ) => {\n\t\t\t\tif ( response.success ) {\n\t\t\t\t\tresolve( {\n\t\t\t\t\t\ttransactionState: 'SUCCESS'\n\t\t\t\t\t} );\n\t\t\t\t\twindow.location = response.data.redirect;\n\t\t\t\t} else {\n\t\t\t\t\tresolve( {\n\t\t\t\t\t\ttransactionState: 'ERROR',\n\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\tintent: 'SHIPPING_ADDRESS',\n\t\t\t\t\t\t\tmessage: 'Invalid data',\n\t\t\t\t\t\t\treason: 'PAYMENT_DATA_INVALID'\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t\tthis.failPayment( 'Payment could not be processed. ' + response.data.message );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Show Google Pay payment sheet when Google Pay payment button is clicked\n\t\t */\n\t\tonGooglePaymentButtonClicked( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tthis.blockUI();\n\n\t\t\tthis.getGooglePaymentDataRequest( ( paymentDataRequest ) => {\n\n\t\t\t\tconst paymentsClient = this.getGooglePaymentsClient();\n\t\t\t\ttry {\n\t\t\t\t\tpaymentsClient.loadPaymentData( paymentDataRequest );\n\t\t\t\t} catch ( err ) {\n\t\t\t\t\tthis.failPayment( 'Could not load payment data. ' + err );\n\t\t\t\t}\n\n\t\t\t\tthis.unblockUI();\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Initialize Google PaymentsClient after Google-hosted JavaScript has loaded\n\t\t *\n\t\t * Display a Google Pay payment button after confirmation of the viewer's\n\t\t * ability to pay.\n\t\t */\n\t\tinit() {\n\n\t\t\t// initialize for the various pages\n\t\t\tif ( $( 'form.cart' ).length ) {\n\t\t\t\tthis.initProductPage();\n\t\t\t} else if ( $( 'form.woocommerce-cart-form' ).length ) {\n\t\t\t\tthis.initCartPage();\n\t\t\t} else if ( $( 'form.woocommerce-checkout' ).length) {\n\t\t\t\tthis.initCheckoutPage()\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.initGooglePay();\n\t\t}\n\n\t\t/**\n\t\t * Initializes Google Pay.\n\t\t */\n\t\tinitGooglePay() {\n\n\t\t\tconst paymentsClient = this.getGooglePaymentsClient();\n\t\t\tpaymentsClient.isReadyToPay( this.getGoogleIsReadyToPayRequest() )\n\t\t\t\t.then( ( response ) => {\n\t\t\t\t\tif ( response.result ) {\n\t\t\t\t\t\tthis.addGooglePayButton();\n\t\t\t\t\t\t// prefetch payment data to improve performance\n\t\t\t\t\t\tthis.prefetchGooglePaymentData();\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t\t.catch( ( err ) => {\n\t\t\t\t\tthis.failPayment( 'Google Pay is not ready. ' + err );\n\t\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Initializes the product page.\n\t\t */\n\t\tinitProductPage() {\n\t\t\tthis.uiElement = $( 'form.cart' );\n\t\t}\n\n\t\t/**\n\t\t * Initializes the cart page.\n\t\t */\n\t\tinitCartPage() {\n\t\t\tthis.uiElement = $( 'form.woocommerce-cart-form' ).parents( 'div.woocommerce' );\n\n\t\t\t// re-init if the cart totals are updated\n\t\t\t$( document.body ).on( 'updated_cart_totals', () => {\n\t\t\t\tthis.initGooglePay();\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Initializes the checkout page.\n\t\t */\n\t\tinitCheckoutPage() {\n\t\t\tthis.uiElement = $( 'form.woocommerce-checkout' );\n\t\t}\n\n\t\t/**\n\t\t * Fails the purchase based on the gateway result.\n\t\t */\n\t\tfailPayment( error ) {\n\n\t\t\tconsole.error( '[Google Pay] ' + error );\n\n\t\t\tthis.unblockUI();\n\n\t\t\tthis.renderErrors( [ this.genericError ] );\n\t\t}\n\n\t\t/**\n\t\t * Renders any new errors and bring them into the viewport.\n \t\t */\n\t\trenderErrors( errors ) {\n\n\t\t\t// hide and remove any previous errors\n\t\t\t$( '.woocommerce-error, .woocommerce-message' ).remove();\n\n\t\t\t// add errors\n\t\t\tthis.uiElement.prepend( '<ul class=\"woocommerce-error\"><li>' + errors.join( '</li><li>' ) + '</li></ul>' );\n\n\t\t\t// unblock UI\n\t\t\tthis.uiElement.removeClass( 'processing' ).unblock();\n\n\t\t\t// scroll to top\n\t\t\t$( 'html, body' ).animate( { scrollTop: this.uiElement.offset().top - 100 }, 1000 );\n\t\t}\n\n\t\t/**\n\t\t * Blocks the payment form UI.\n\t\t */\n\t\tblockUI() {\n\t\t\tthis.uiElement.block( { message: null, overlayCSS: { background: '#fff', opacity: 0.6 } } );\n\t\t}\n\n\t\t/**\n\t\t * Unblocks the payment form UI.\n\t\t */\n\t\tunblockUI() {\n\t\t\tthis.uiElement.unblock();\n\t\t}\n\t}\n\n\t$( document.body ).trigger( 'sv_wc_google_pay_handler_v5_12_1_loaded' );\n\n} );\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$c0249d4a3fc9bb83$export$2996f80ef42b8419","instance","Constructor","TypeError","$690246f0b6925227$var$_defineProperties","target","props","i","length","descriptor","writable","key","$690246f0b6925227$export$d60067ff2358eee8","protoProps","staticProps","prototype","$guLUH","$90XvN","jQuery","$","SV_WC_Google_Pay_Handler_v5_12_1","params","_","plugin_id","merchant_id","merchant_name","gateway_id","environment","gateway_id_dasherized","ajax_url","recalculate_totals_nonce","process_nonce","button_style","card_types","available_countries","currency_code","needs_shipping","generic_error","gatewayID","merchantID","merchantName","ajaxURL","recalculateTotalsNonce","processNonce","buttonStyle","availableCountries","currencyCode","needsShipping","genericError","product_id","productID","baseRequest","apiVersion","apiVersionMinor","tokenizationSpecification","type","parameters","baseCardPaymentMethod","allowedAuthMethods","allowedCardNetworks","billingAddressRequired","billingAddressParameters","format","phoneNumberRequired","cardPaymentMethod","assign","paymentsClient","value","allowedPaymentMethods","resolve","_this","getGoogleTransactionInfo","transactionInfo","paymentDataRequest","merchantInfo","merchantId","emailRequired","callbackIntents","shippingAddressRequired","shippingAddressParameters","getGoogleShippingAddressParameters","shippingOptionRequired","args","paymentDataCallbacks","onPaymentAuthorized","paymentData","onPaymentDataChanged","google","payments","api","PaymentsClient","blockUI","Promise","reject","processPayment","transactionState","error","intent","message","reason","unblockUI","intermediatePaymentData","shippingAddress","shippingOptionData","chosenShippingMethod","callbackTrigger","getUpdatedTotals","paymentDataRequestUpdate","newShippingOptionParameters","shippingOptions","getGoogleUnserviceableAddressError","failPayment","data","action","concat","post","response","success","JSON","parse","shippingMethod","allowedCountryCodes","button","getGooglePaymentsClient","createButton","onClick","event","onGooglePaymentButtonClicked","buttonColor","buttonSizeMode","document","getElementById","appendChild","getGooglePaymentDataRequest","totalPriceStatus","prefetchPaymentData","nonce","stringify","location","redirect","preventDefault","loadPaymentData","initProductPage","initCartPage","initCheckoutPage","initGooglePay","isReadyToPay","getGoogleIsReadyToPayRequest","then","result","addGooglePayButton","prefetchGooglePaymentData","catch","uiElement","parents","body","on","console","renderErrors","errors","remove","prepend","join","removeClass","unblock","animate","scrollTop","offset","top","block","overlayCSS","background","opacity","trigger"],"version":3,"file":"sv-wc-payment-gateway-google-pay.js.map","sourceRoot":"../../../../../"}