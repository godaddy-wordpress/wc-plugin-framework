{"version":3,"sources":["frontend/sv-wc-payment-gateway-payment-form.coffee"],"names":["indexOf","jQuery","$","window","SV_WC_Payment_Form_Handler_v5_12_4","args","id","id_dasherized","plugin_id","type","csc_required","csc_required_for_tokens","enabled_card_types","length","form","handle_checkout_page","handle_pay_page","console","log","handle_add_payment_method_page","params","on","handle_sample_check_hint","document","trigger","instance","body","format_credit_card_inputs","set_payment_fields","handle_saved_payment_methods","validate_payment_data","submit","val","$required_fields","payment_fields","find","each","i","input","handler","valid","is","saved_payment_method_selected","validate_card_data","validate_account_data","triggerHandler","payment_form","passed_validation","$card_number","$csc","$expiry","payment","do_inline_credit_card_validation","$card_type","cardType","call","addClass","removeClass","validateCardExpiry","validateCardCVC","account_number","csc","errors","expiry","test","push","cvv_digits_invalid","cvv_length_invalid","cvv_missing","cardExpiryVal","replace","card_number_length_invalid","card_number_digits_invalid","validateCardNumber","card_number_invalid","card_number_missing","card_exp_date_invalid","render_errors","routing_number","routing_number_length_invalid","routing_number_digits_invalid","routing_number_missing","account_number_length_invalid","account_number_invalid","account_number_missing","remove","prepend","join","unblock","blur","animate","scrollTop","offset","top","$csc_field","$new_payment_method_selection","closest","tokenized_payment_method_selected","slideUp","after","slideDown","change","$parent_row","next","show","hide","$sample_check","block","message","overlayCSS","background","opacity"],"mappings":"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","file":"sv-wc-payment-gateway-payment-form.js","sourceRoot":"../js","sourcesContent":["(function() {\n  /*\n   WooCommerce SkyVerge Payment Gateway Framework Payment Form CoffeeScript\n   Version 4.3.0\n\n   Copyright (c) 2014-2024, SkyVerge, Inc.\n   Licensed under the GNU General Public License v3.0\n   http://www.gnu.org/licenses/gpl-3.0.html\n  */\n  var indexOf = [].indexOf;\n\n  jQuery(function($) {\n    \"use strict\";\n    window.SV_WC_Payment_Form_Handler_v5_12_4 = class SV_WC_Payment_Form_Handler_v5_12_4 {\n      // Public: Instantiate Payment Form Handler\n\n      // args - object with properties:\n      //   id - gateway ID\n      //   id_dasherized - gateway ID dasherized\n      //   plugin_id - plugin ID\n      //   type - gateway type, either `credit-card` or `echeck`\n      //   csc_required - true if the gateway requires the CSC field to be displayed\n\n      // Returns SV_WC_Payment_Form_Handler_v5_12_4 instance\n      constructor(args) {\n        this.id = args.id;\n        this.id_dasherized = args.id_dasherized;\n        this.plugin_id = args.plugin_id;\n        this.type = args.type;\n        this.csc_required = args.csc_required;\n        this.csc_required_for_tokens = args.csc_required_for_tokens;\n        this.enabled_card_types = args.enabled_card_types;\n        // which payment form?\n        if ($('form.checkout').length) {\n          this.form = $('form.checkout');\n          this.handle_checkout_page();\n        } else if ($('form#order_review').length) {\n          this.form = $('form#order_review');\n          this.handle_pay_page();\n        } else if ($('form#add_payment_method').length) {\n          this.form = $('form#add_payment_method');\n          this.handle_add_payment_method_page();\n        } else {\n          console.log('No payment form found!');\n          return;\n        }\n        // localized error messages\n        this.params = window[\"sv_wc_payment_gateway_payment_form_params\"];\n        if (this.type === 'echeck') {\n          // handle sample check image hint\n          this.form.on('click', '.js-sv-wc-payment-gateway-echeck-form-check-hint, .js-sv-wc-payment-gateway-echeck-form-sample-check', () => {\n            return this.handle_sample_check_hint();\n          });\n        }\n        $(document).trigger('sv_wc_payment_form_handler_init', {\n          id: this.id,\n          instance: this\n        });\n      }\n\n      // Public: Handle required actions on the checkout page\n\n      // Returns nothing.\n      handle_checkout_page() {\n        if (this.type === 'credit-card') {\n          // format/validate credit card inputs using jQuery.payment\n          $(document.body).on('updated_checkout', () => {\n            return this.format_credit_card_inputs();\n          });\n        }\n        // updated payment fields jQuery object on each checkout update (prevents stale data)\n        $(document.body).on('updated_checkout', () => {\n          return this.set_payment_fields();\n        });\n        // handle saved payment methods\n        // note on the checkout page, this is bound to `updated_checkout` so it\n        // fires even when other parts of the checkout are changed\n        $(document.body).on('updated_checkout', () => {\n          return this.handle_saved_payment_methods();\n        });\n        // validate payment data before order is submitted\n        return this.form.on(`checkout_place_order_${this.id}`, () => {\n          return this.validate_payment_data();\n        });\n      }\n\n      // Public: Handle required actions on the Order > Pay page\n\n      // Returns nothing.\n      handle_pay_page() {\n        this.set_payment_fields();\n        // format/validate credit card inputs using jQuery.payment\n        if (this.type === 'credit-card') {\n          this.format_credit_card_inputs();\n        }\n        // handle saved payment methods\n        this.handle_saved_payment_methods();\n        // validate payment data before order is submitted\n        return this.form.submit(() => {\n          if ($('#order_review input[name=payment_method]:checked').val() === this.id) {\n            // but only when one of our payment gateways is selected\n            return this.validate_payment_data();\n          }\n        });\n      }\n\n      // Public: Handle required actions on the Add Payment Method page\n\n      // Returns nothing.\n      handle_add_payment_method_page() {\n        this.set_payment_fields();\n        // format/validate credit card inputs using jQuery.payment\n        if (this.type === 'credit-card') {\n          this.format_credit_card_inputs();\n        }\n        // validate payment data before order is submitted\n        return this.form.submit(() => {\n          if ($('#add_payment_method input[name=payment_method]:checked').val() === this.id) {\n            // but only when one of our payment gateways is selected\n            return this.validate_payment_data();\n          }\n        });\n      }\n\n      // Public: Set payment fields class variable, this is done\n      // during the updated_checkout event as otherwise the reference to\n      // the checkout fields becomes stale (somehow ¯\\_(ツ)_/¯)\n\n      // This ensures payment fields are not marked as \"invalid\" before the customer has interacted with them.\n\n      // Returns nothing.\n      set_payment_fields() {\n        var $required_fields;\n        this.payment_fields = $(`.payment_method_${this.id}`);\n        $required_fields = this.payment_fields.find('.validate-required .input-text');\n        return $required_fields.each((i, input) => {\n          // if any of the required fields have a value, bail this loop and proceed with WooCommerce validation\n          if ($(input).val()) {\n            return false;\n          }\n          // otherwise remove all validation result classes from the inputs, since the form is freshly loaded\n          return $(input).trigger('input');\n        });\n      }\n\n      // Public: Validate Payment data when order is placed\n\n      // Returns boolean, true if payment data is valid, false otherwise\n      validate_payment_data() {\n        var handler, valid;\n        if (this.form.is('.processing')) {\n          // bail when already processing\n          return false;\n        }\n        this.saved_payment_method_selected = this.payment_fields.find('.js-sv-wc-payment-gateway-payment-token:checked').val();\n        // perform internal validations (all fields present & valid, etc)\n        valid = this.type === 'credit-card' ? this.validate_card_data() : this.validate_account_data();\n        // let gateways perform their own validation prior to form submission\n        handler = $(document.body).triggerHandler('sv_wc_payment_form_valid_payment_data', {\n          payment_form: this,\n          passed_validation: valid\n        }) !== false;\n        return valid && handler;\n      }\n\n      // Public: format card data using jQuery.Payment\n\n      // Returns nothing.\n      format_credit_card_inputs() {\n        var $card_number, $csc, $expiry;\n        $card_number = $('.js-sv-wc-payment-gateway-credit-card-form-account-number').payment('formatCardNumber');\n        $expiry = $('.js-sv-wc-payment-gateway-credit-card-form-expiry').payment('formatCardExpiry');\n        $csc = $('.js-sv-wc-payment-gateway-credit-card-form-csc').payment('formatCardCVC');\n        if ($card_number.val() && $card_number.val().length > 0) {\n          $card_number.trigger('change');\n        }\n        if ($expiry.val() && $expiry.val().length > 0) {\n          $expiry.trigger('change');\n        }\n        if ($csc.val() && $csc.val().length > 0) {\n          $csc.trigger('change');\n        }\n        // perform inline validation on credit card inputs\n        return $('.js-sv-wc-payment-gateway-credit-card-form-input').on('change paste keyup', () => {\n          return this.do_inline_credit_card_validation();\n        });\n      }\n\n      // Public: perform inline validation on credit card fields\n\n      // Returns nothing.\n      do_inline_credit_card_validation() {\n        var $card_number, $card_type, $csc, $expiry;\n        $card_number = $('.js-sv-wc-payment-gateway-credit-card-form-account-number');\n        $expiry = $('.js-sv-wc-payment-gateway-credit-card-form-expiry');\n        $csc = $('.js-sv-wc-payment-gateway-credit-card-form-csc');\n        $card_type = $.payment.cardType($card_number.val());\n        if (indexOf.call(this.enabled_card_types, $card_type) < 0) {\n          $card_number.addClass('invalid-card-type');\n        } else {\n          $card_number.removeClass('invalid-card-type');\n        }\n        if ($.payment.validateCardExpiry($expiry.payment('cardExpiryVal'))) {\n          $expiry.addClass('identified');\n        } else {\n          $expiry.removeClass('identified');\n        }\n        if ($.payment.validateCardCVC($csc.val())) {\n          return $csc.addClass('identified');\n        } else {\n          return $csc.removeClass('identified');\n        }\n      }\n\n      // Public: Perform validation on the credit card info entered\n\n      // Return boolean, true if credit card info is valid, false otherwise\n      validate_card_data() {\n        var account_number, csc, errors, expiry;\n        errors = [];\n        csc = this.payment_fields.find('.js-sv-wc-payment-gateway-credit-card-form-csc').val();\n        // always validate the CSC if present\n        if (csc != null) {\n          if (csc) {\n            if (/\\D/.test(csc)) {\n              errors.push(this.params.cvv_digits_invalid);\n            }\n            if (csc.length < 3 || csc.length > 4) {\n              errors.push(this.params.cvv_length_invalid);\n            }\n          } else if (this.csc_required) {\n            if (!this.saved_payment_method_selected || this.csc_required_for_tokens) {\n              errors.push(this.params.cvv_missing);\n            }\n          }\n        }\n        // Only validate the other CC fields if necessary\n        if (!this.saved_payment_method_selected) {\n          account_number = this.payment_fields.find('.js-sv-wc-payment-gateway-credit-card-form-account-number').val();\n          expiry = $.payment.cardExpiryVal(this.payment_fields.find('.js-sv-wc-payment-gateway-credit-card-form-expiry').val());\n          // replace any dashes or spaces in the card number\n          account_number = account_number.replace(/-|\\s/g, '');\n          // validate card number\n          if (!account_number) {\n            errors.push(this.params.card_number_missing);\n          } else {\n            if (account_number.length < 12 || account_number.length > 19) {\n              errors.push(this.params.card_number_length_invalid);\n            }\n            if (/\\D/.test(account_number)) {\n              errors.push(this.params.card_number_digits_invalid);\n            }\n            if (!$.payment.validateCardNumber(account_number)) { // performs luhn check\n              errors.push(this.params.card_number_invalid);\n            }\n          }\n          if (!$.payment.validateCardExpiry(expiry)) { // validates future date\n            \n            // validate expiration date\n            errors.push(this.params.card_exp_date_invalid);\n          }\n        }\n        if (errors.length > 0) {\n          this.render_errors(errors);\n          return false;\n        } else {\n          // get rid of any space/dash characters\n          this.payment_fields.find('.js-sv-wc-payment-gateway-credit-card-form-account-number').val(account_number);\n          return true;\n        }\n      }\n\n      // Public: Perform validation on the eCheck info entered\n\n      // Return boolean, true if eCheck info is valid, false otherwise\n      validate_account_data() {\n        var account_number, errors, routing_number;\n        if (this.saved_payment_method_selected) {\n          return true;\n        }\n        errors = [];\n        routing_number = this.payment_fields.find('.js-sv-wc-payment-gateway-echeck-form-routing-number').val();\n        account_number = this.payment_fields.find('.js-sv-wc-payment-gateway-echeck-form-account-number').val();\n        // validate routing number\n        if (!routing_number) {\n          errors.push(this.params.routing_number_missing);\n        } else {\n          if (9 !== routing_number.length) {\n            errors.push(this.params.routing_number_length_invalid);\n          }\n          if (/\\D/.test(routing_number)) {\n            errors.push(this.params.routing_number_digits_invalid);\n          }\n        }\n        // validate account number\n        if (!account_number) {\n          errors.push(this.params.account_number_missing);\n        } else {\n          if (account_number.length < 3 || account_number.length > 17) {\n            errors.push(this.params.account_number_length_invalid);\n          }\n          if (/\\D/.test(account_number)) {\n            errors.push(this.params.account_number_invalid);\n          }\n        }\n        if (errors.length > 0) {\n          this.render_errors(errors);\n          return false;\n        } else {\n          // get rid of any space/dash characters\n          this.payment_fields.find('.js-sv-wc-payment-gateway-echeck-form-account-number').val(account_number);\n          return true;\n        }\n      }\n\n      // Public: Render any new errors and bring them into the viewport\n\n      // Returns nothing.\n      render_errors(errors) {\n        // hide and remove any previous errors\n        $('.woocommerce-error, .woocommerce-message').remove();\n        // add errors\n        this.form.prepend('<ul class=\"woocommerce-error\"><li>' + errors.join('</li><li>') + '</li></ul>');\n        // unblock UI\n        this.form.removeClass('processing').unblock();\n        this.form.find('.input-text, select').blur();\n        // scroll to top\n        return $('html, body').animate({\n          scrollTop: this.form.offset().top - 100\n        }, 1000);\n      }\n\n      // Public: Handle associated actions for saved payment methods\n\n      // Returns nothing.\n      handle_saved_payment_methods() {\n        var $csc_field, $new_payment_method_selection, csc_required, csc_required_for_tokens, id_dasherized;\n        // make available inside change events\n        id_dasherized = this.id_dasherized;\n        csc_required = this.csc_required;\n        csc_required_for_tokens = this.csc_required_for_tokens;\n        $new_payment_method_selection = $(`div.js-wc-${id_dasherized}-new-payment-method-form`);\n        $csc_field = $new_payment_method_selection.find('.js-sv-wc-payment-gateway-credit-card-form-csc').closest('.form-row');\n        // show/hide the saved payment methods when a saved payment method is de-selected/selected\n        $(`input.js-wc-${this.id_dasherized}-payment-token`).on('change', function() {\n          var tokenized_payment_method_selected;\n          tokenized_payment_method_selected = $(`input.js-wc-${id_dasherized}-payment-token:checked`).val();\n          if (tokenized_payment_method_selected) {\n            // using an existing tokenized payment method, hide the 'new method' fields\n            $new_payment_method_selection.slideUp(200);\n            // move the CSC field out of the 'new method' fields so it can be used with the tokenized transaction\n            if (csc_required_for_tokens) {\n              $csc_field.removeClass('form-row-last').addClass('form-row-first');\n              return $new_payment_method_selection.after($csc_field);\n            }\n          } else {\n            // use new payment method, display the 'new method' fields\n            $new_payment_method_selection.slideDown(200);\n            // move the CSC field back into its regular spot\n            if (csc_required_for_tokens) {\n              $csc_field.removeClass('form-row-first').addClass('form-row-last');\n              return $new_payment_method_selection.find('.js-sv-wc-payment-gateway-credit-card-form-expiry').closest('.form-row').after($csc_field);\n            }\n          }\n        }).change();\n        // display the 'save payment method' option for guest checkouts if the 'create account' option is checked\n        //  but only hide the input if there is a 'create account' checkbox (some themes just display the password)\n        $('input#createaccount').on('change', function() {\n          var $parent_row;\n          $parent_row = $(`input.js-wc-${id_dasherized}-tokenize-payment-method`).closest('p.form-row');\n          if ($(this).is(':checked')) {\n            $parent_row.slideDown();\n            return $parent_row.next().show();\n          } else {\n            $parent_row.hide();\n            return $parent_row.next().hide();\n          }\n        });\n        if (!$('input#createaccount').is(':checked')) {\n          return $('input#createaccount').change();\n        }\n      }\n\n      // Public: Handle showing/hiding the sample check image\n\n      // Returns nothing.\n      handle_sample_check_hint() {\n        var $sample_check;\n        $sample_check = this.payment_fields.find('.js-sv-wc-payment-gateway-echeck-form-sample-check');\n        if ($sample_check.is(\":visible\")) {\n          return $sample_check.slideUp();\n        } else {\n          return $sample_check.slideDown();\n        }\n      }\n\n      // Blocks the payment form UI\n\n      // @since 3.0.0\n      block_ui() {\n        return this.form.block({\n          message: null,\n          overlayCSS: {\n            background: '#fff',\n            opacity: 0.6\n          }\n        });\n      }\n\n      // Unblocks the payment form UI\n\n      // @since 3.0.0\n      unblock_ui() {\n        return this.form.unblock();\n      }\n\n    };\n    // dispatch loaded event\n    return $(document.body).trigger(\"sv_wc_payment_form_handler_v5_12_4_loaded\");\n  });\n\n}).call(this);\n"]}