{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,I,W,O,C,GCAO,SAAS,EAAkB,CAAQ,CAAE,CAAW,EACnD,GAAI,CAAE,CAAA,aAAoB,CAAA,EAAc,MAAM,AAAI,UAAU,oCAChE,C,G,E,Q,S,C,C,C,ECFA,SAAS,EAAkB,CAAM,CAAE,CAAK,EACpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAAK,CACnC,IAAI,EAAa,CAAK,CAAC,EAAE,AACzB,CAAA,EAAW,UAAU,CAAG,EAAW,UAAU,EAAI,CAAA,EACjD,EAAW,YAAY,CAAG,CAAA,EAEtB,UAAW,GAAY,CAAA,EAAW,QAAQ,CAAG,CAAA,CAAjD,EAEA,OAAO,cAAc,CAAC,EAAQ,EAAW,GAAG,CAAE,EAClD,CACJ,CACO,SAAS,EAAc,CAAW,CAAE,CAAU,CAAE,CAAW,EAI9D,OAHI,GAAY,EAAkB,EAAY,SAAS,CAAE,GACrD,GAAa,EAAkB,EAAa,GAEzC,CACX,C,E,E,O,C,I,W,O,C,E,G,I,E,E,S,E,E,SCTG,AAAA,CAAA,WAAA,IAAA,EAAA,EAAA,CAAA,OAAA,CACH,OAAO,SAAE,CAAF,EA2XN,OAvXM,OAAO,kCAAA,CAAb,WAAA,SAAA,EAae,CAAD,E,I,E,I,CAWZ,G,A,C,E,E,C,A,E,I,C,GATA,IAAC,CAAA,EAAD,CAA2B,EAAK,EAAhC,CACA,IAAC,CAAA,aAAD,CAA2B,EAAK,aAAhC,CACA,IAAC,CAAA,SAAD,CAA2B,EAAK,SAAhC,CACA,IAAC,CAAA,IAAD,CAA2B,EAAK,IAAhC,CACA,IAAC,CAAA,YAAD,CAA2B,EAAK,YAAhC,CACA,IAAC,CAAA,uBAAD,CAA2B,EAAK,uBAAhC,CACA,IAAC,CAAA,kBAAD,CAA2B,EAAK,kBAAA,CAG7B,EAAG,iBAAkB,MAAxB,CACC,IAAC,CAAA,IAAD,CAAQ,EAAG,iBACX,IAAI,CAAC,oBAAL,QAEI,GAAG,EAAG,qBAAsB,MAA5B,CACJ,IAAC,CAAA,IAAD,CAAQ,EAAG,qBACX,IAAI,CAAC,eAAL,QAEI,GAAG,EAAG,2BAA4B,MAAlC,CACJ,IAAC,CAAA,IAAD,CAAQ,EAAG,2BACX,IAAI,CAAC,8BAAL,OAFI,CAKJ,QAAQ,GAAR,CAAa,0BACb,MAvBJ,CA0BG,IAAC,CAAA,MAAD,CAAU,OAAQ,yCAAlB,CAG4K,WAAT,IAAC,CAAA,IAAD,EAAnK,IAAC,CAAA,IAAI,CAAC,EAAN,CAAU,QAAS,uGAAwG,WAAG,OAAA,EAAK,wBAAL,EAAH,GAE3H,EAAG,UAAW,OAAd,CAAuB,kCAAmC,CAAE,GAAI,IAAC,CAAA,EAAP,CAAW,SAAU,IAAV,AAAX,E,C,M,A,C,E,E,C,A,E,E,C,CAM3D,IAAA,uBAAA,MAAA,W,I,E,I,CAcC,MAX6F,gBAAT,IAAC,CAAA,IAAD,EAApF,EAAG,SAAS,IAAZ,EAAmB,EAAnB,CAAuB,mBAAoB,WAAG,OAAA,EAAK,yBAAL,EAAH,GAG3C,EAAG,SAAS,IAAZ,EAAmB,EAAnB,CAAuB,mBAAoB,WAAG,OAAA,EAAK,kBAAL,EAAH,GAK3C,EAAG,SAAS,IAAZ,EAAmB,EAAnB,CAAuB,mBAAoB,WAAG,OAAA,EAAK,4BAAL,EAAH,GAG3C,IAAC,CAAA,IAAI,CAAC,EAAN,CAAU,wBAAA,MAAA,CAAyB,IAAC,CAAA,EAA1B,EAAiC,WAAG,OAAA,EAAK,qBAAL,EAAH,EAdtB,C,E,CAoBtB,IAAA,kBAAA,MAAA,W,I,E,I,CAYC,OAVA,IAAI,CAAC,kBAAL,GAGY,gBAAT,IAAC,CAAA,IAAD,EACF,IAAI,CAAC,yBAAL,GAGD,IAAI,CAAC,4BAAL,GAGA,IAAC,CAAA,IAAI,CAAC,MAAN,CAAa,WAGZ,GAAuC,EAAG,oDAAqD,GAAxD,KAAiE,EAAC,EAAzG,CAAA,OAAO,EAAK,qBAAL,EAHK,EAZG,C,E,CAqBjB,IAAA,iCAAA,MAAA,W,I,E,I,CASC,OAPA,IAAI,CAAC,kBAAL,GAGY,gBAAT,IAAC,CAAA,IAAD,EACF,IAAI,CAAC,yBAAL,GAGD,IAAC,CAAA,IAAI,CAAC,MAAN,CAAa,WAGZ,GAAuC,EAAG,0DAA2D,GAA9D,KAAuE,EAAC,EAA/G,CAAA,OAAO,EAAK,qBAAL,EAHK,EATkB,C,E,CAsBhC,IAAA,qBAAA,MAAA,WAMC,OAJA,IAAC,CAAA,cAAD,CAAkB,EAAG,mBAAA,MAAA,CAAoB,IAAC,CAAA,EAArB,GAIrB,AAFmB,IAAC,CAAA,cAAc,CAAC,IAAhB,CAAsB,kCAExB,IAAjB,CAAuB,SAAE,CAAA,CAAG,CAA5B,QAGC,CAAG,EAAG,GAAQ,GAAX,IAIH,EAAG,GAAQ,OAAX,CAAoB,QAPE,EANJ,C,E,CAoBpB,IAAA,wBAAA,MAAA,WAEF,IAAA,EAAA,QACG,CAAgB,IAAC,CAAA,IAAI,CAAC,EAAN,CAAU,iBAE1B,IAAC,CAAA,6BAAD,CAAiC,IAAC,CAAA,cAAc,CAAC,IAAhB,CAAsB,mDAAoD,GAA1E,GAGjC,EAAW,AAAS,gBAAT,IAAC,CAAA,IAAD,CAA4B,IAAI,CAAC,kBAAL,GAA+B,IAAI,CAAC,qBAAL,GAGtE,EAAU,AAAoI,CAAA,IAApI,EAAG,SAAS,IAAZ,EAAmB,cAAnB,CAAmC,wCAAyC,CAAE,aAAc,IAAhB,CAAsB,kBAAmB,CAAzC,GAE/E,GAAS,EAbM,C,E,CAmBvB,IAAA,4BAAA,MAAA,W,IACF,EAAA,EAAA,E,E,I,CAUG,OAVA,EAAe,EAAE,6DAA6D,OAA/D,CAAuE,oBACtF,EAAe,EAAE,qDAAqD,OAAvD,CAA+D,oBAC9E,EAAe,EAAE,kDAAkD,OAApD,CAA4D,iBAGxC,EAAa,GAAb,IAAsB,EAAa,GAAb,GAAmB,MAAnB,CAA4B,GAArF,EAAa,OAAb,CAAsB,UACQ,EAAQ,GAAR,IAAiB,EAAQ,GAAR,GAAc,MAAd,CAAuB,GAAtE,EAAQ,OAAR,CAAiB,UACU,EAAK,GAAL,IAAc,EAAK,GAAL,GAAW,MAAX,CAAoB,GAA7D,EAAK,OAAL,CAAc,UAGd,EAAG,oDAAqD,EAAxD,CAA4D,qBAAsB,WAAG,OAAA,EAAK,gCAAL,EAAH,EAXxD,C,E,CAiB3B,IAAA,mCAAA,MAAA,WAEF,IAAA,EAAA,EAAA,EAAA,QAgBG,CAhBA,EAAe,EAAG,6DAClB,EAAe,EAAG,qDAClB,EAAe,EAAG,kDAElB,EAAa,EAAE,OAAO,CAAC,QAAV,CAAoB,EAAa,GAAb,IAEjC,AAAG,EAAH,EAAA,IAAA,CAAqB,IAAC,CAAA,kBAAA,CAAnB,GACF,EAAa,QAAb,CAAuB,qBAEvB,EAAa,WAAb,CAA0B,qBAExB,EAAE,OAAO,CAAC,kBAAV,CAA8B,EAAQ,OAAR,CAAiB,kBACjD,EAAQ,QAAR,CAAkB,cAElB,EAAQ,WAAR,CAAqB,cAEnB,EAAE,OAAO,CAAC,eAAV,CAA2B,EAAK,GAAL,KAC7B,EAAK,QAAL,CAAe,cAEf,EAAK,WAAL,CAAkB,aArBc,C,E,CA2BlC,IAAA,qBAAA,MAAA,WAEF,IAAA,EAAA,EAAA,EAAA,QAkCG,CAlCA,EAAS,EAAT,CAKG,MAHH,CAAA,EAAM,IAAC,CAAA,cAAc,CAAC,IAAhB,CAAsB,kDAAmD,GAAzE,EAAN,IAKI,GAC2C,KAAK,IAAL,CAAW,IAAxD,EAAO,IAAP,CAAa,IAAC,CAAA,MAAM,CAAC,kBAArB,EAC6C,CAAA,EAAI,MAAJ,CAAa,GAAK,EAAI,MAAJ,CAAa,CAAA,GAA5E,EAAO,IAAP,CAAa,IAAC,CAAA,MAAM,CAAC,kBAArB,GACO,IAAC,CAAA,YAAJ,EACD,CAAA,CAAI,IAAC,CAAA,6BAAL,EAAsC,IAAC,CAAA,uBAA1C,AAA0C,GACzC,EAAO,IAAP,CAAa,IAAC,CAAA,MAAM,CAAC,WAArB,GAGI,IAAC,CAAA,6BAAR,GAEC,EAAiB,IAAC,CAAA,cAAc,CAAC,IAAhB,CAAsB,6DAA8D,GAApF,GACjB,EAAiB,EAAE,OAAO,CAAC,aAAV,CAAyB,IAAC,CAAA,cAAc,CAAC,IAAhB,CAAsB,qDAAsD,GAA5E,IAG1C,CAAA,EAAiB,EAAe,OAAf,CAAwB,QAAS,GAAlD,GAMsD,CAAA,EAAe,MAAf,CAAwB,IAAM,EAAe,MAAf,CAAwB,EAAA,GAA3G,EAAO,IAAP,CAAa,IAAC,CAAA,MAAM,CAAC,0BAArB,EACqD,KAAK,IAAL,CAAW,IAAhE,EAAO,IAAP,CAAa,IAAC,CAAA,MAAM,CAAC,0BAArB,EACkD,EAAE,OAAO,CAAC,kBAAV,CAA8B,IAAhF,EAAO,IAAP,CAAa,IAAC,CAAA,MAAM,CAAC,mBAArB,GAJA,EAAO,IAAP,CAAa,IAAC,CAAA,MAAM,CAAC,mBAArB,EAOmD,EAAE,OAAO,CAAC,kBAAV,CAA8B,IAAlF,EAAO,IAAP,CAAa,IAAC,CAAA,MAAM,CAAC,qBAArB,GAEE,EAAO,MAAP,CAAgB,IAClB,IAAI,CAAC,aAAL,CAAoB,GACb,CAAA,IAGP,IAAC,CAAA,cAAc,CAAC,IAAhB,CAAsB,6DAA8D,GAApF,CAAyF,GAClF,CAAA,EA1CW,C,E,CAgDpB,IAAA,wBAAA,MAAA,WAEF,IAAA,EAAA,EAAA,QAAG,EAAe,IAAC,CAAA,6BAAhB,IAEA,EAAS,EAAT,CAEA,EAAiB,IAAC,CAAA,cAAc,CAAC,IAAhB,CAAqB,wDAAwD,GAA7E,GACjB,EAAiB,IAAC,CAAA,cAAc,CAAC,IAAhB,CAAqB,wDAAwD,GAA7E,GAGV,GAGkD,IAAK,EAAe,MAA5E,EAAA,EAAO,IAAP,CAAa,IAAC,CAAA,MAAM,CAAC,6BAArB,EACwD,KAAK,IAAL,CAAW,IAAnE,EAAO,IAAP,CAAa,IAAC,CAAA,MAAM,CAAC,6BAArB,GAHA,EAAO,IAAP,CAAa,IAAC,CAAA,MAAM,CAAC,sBAArB,EAMM,GAGkD,CAAA,EAAe,MAAf,CAAwB,GAAK,EAAe,MAAf,CAAwB,EAAA,GAA7G,EAAO,IAAP,CAAa,IAAC,CAAA,MAAM,CAAC,6BAArB,EACiD,KAAK,IAAL,CAAW,IAA5D,EAAO,IAAP,CAAa,IAAC,CAAA,MAAM,CAAC,sBAArB,GAHA,EAAO,IAAP,CAAa,IAAC,CAAA,MAAM,CAAC,sBAArB,EAKE,EAAO,MAAP,CAAgB,IAClB,IAAI,CAAC,aAAL,CAAoB,GACb,CAAA,IAGP,IAAC,CAAA,cAAc,CAAC,IAAhB,CAAsB,wDAAyD,GAA/E,CAAoF,GAC7E,CAAA,GA7Bc,C,E,CAmCvB,IAAA,gBAAA,MAAA,SAAgB,CAAD,EAad,OAVA,EAAG,4CAA6C,MAAhD,GAGA,IAAC,CAAA,IAAI,CAAC,OAAN,CAAc,qCAAuC,EAAO,IAAP,CAAa,aAAgB,cAGlF,IAAC,CAAA,IAAI,CAAC,WAAN,CAAmB,cAAe,OAAlC,GACA,IAAC,CAAA,IAAI,CAAC,IAAN,CAAY,uBAAwB,IAApC,GAGA,EAAG,cAAe,OAAlB,CAA2B,CAAE,UAAW,IAAC,CAAA,IAAI,CAAC,MAAN,GAAe,GAAf,CAAqB,GAAlC,EAAyC,IAbtD,C,E,CAmBf,IAAA,+BAAA,MAAA,WAEF,IAAA,EAAA,EAAA,EAAA,EA8CG,GA7CA,EAAgB,IAAC,CAAA,aAAjB,CAE2B,IAAC,CAAA,YAA5B,CACA,EAA2B,IAAC,CAAA,uBAA5B,CAGA,EAAa,AADb,CAAA,EAAgC,EAAG,aAAA,MAAA,CAAc,EAAd,4BAAnC,EAC2C,IAA9B,CAAoC,kDAAmD,OAAvF,CAAgG,aAG7G,EAAG,eAAA,MAAA,CAAgB,IAAC,CAAA,aAAjB,CAAA,mBAAkD,EAArD,CAAwD,SAAU,WAIjE,GAFoC,EAAG,eAAA,MAAA,CAAgB,EAAhB,2BAAyD,GAA5D,GAQnC,CAAA,GAHA,EAA8B,OAA9B,CAAuC,KAGpC,EAEF,OADA,EAAW,WAAX,CAAwB,iBAAkB,QAA1C,CAAoD,kBACpD,EAA8B,KAA9B,CAAqC,EARvC,MAeC,GAHA,EAA8B,SAA9B,CAAyC,KAGtC,EAEF,OADA,EAAW,WAAX,CAAwB,kBAAmB,QAA3C,CAAqD,iBACrD,EAA8B,IAA9B,CAAoC,qDAAsD,OAA1F,CAAmG,aAAc,KAAjH,CAAwH,EArBzD,GAsBjE,MAtBD,GA0BA,EAAG,uBAAwB,EAA3B,CAA8B,SAAU,WAC3C,IAAA,QAEI,CAFA,EAAc,EAAG,eAAA,MAAA,CAAgB,EAAhB,6BAA2D,OAA9D,CAAuE,cAElF,EAAG,IAAH,EAAU,EAAV,CAAc,cAChB,EAAY,SAAZ,GACA,EAAY,IAAZ,GAAmB,IAAnB,KAEA,EAAY,IAAZ,GACA,EAAY,IAAZ,GAAmB,IAAnB,GARsC,GAUxC,CAA2C,EAAG,uBAAwB,EAA3B,CAA+B,YAA1E,OAAA,EAAG,uBAAwB,MAA3B,EAhD6B,C,E,CAsD9B,IAAA,2BAAA,MAAA,WAEF,IAAA,QAEG,AAAG,AAFH,CAAA,EAAgB,IAAC,CAAA,cAAc,CAAC,IAAhB,CAAsB,qDAAtC,EAEiB,EAAd,CAAkB,YAAkB,EAAc,OAAd,GAA6B,EAAc,SAAd,EAJ3C,C,E,CAW1B,IAAA,WAAA,MAAA,WAAa,OAAA,IAAC,CAAA,IAAI,CAAC,KAAN,CAAa,CAAA,QAAS,KAAM,WAAY,CAAA,WAAY,OAAO,QAAS,EAA5B,CAA3B,EAAhB,C,E,CAMV,IAAA,aAAA,MAAA,WAAe,OAAA,IAAC,CAAA,IAAI,CAAC,OAAN,EAAH,C,E,E,C,IAIb,EAAG,SAAS,IAAZ,EAAmB,OAAnB,CAA4B,4CA3XtB,E,C,E,I,C,K","sources":["<anon>","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","woocommerce/payment-gateway/assets/js/frontend/sv-wc-payment-gateway-payment-form.coffee"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequireb301\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequireb301\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"guLUH\", function(module, exports) {\n\n$parcel$export(module.exports, \"_\", function () { return $c0249d4a3fc9bb83$export$2996f80ef42b8419; });\nfunction $c0249d4a3fc9bb83$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n});\n\nparcelRegister(\"90XvN\", function(module, exports) {\n\n$parcel$export(module.exports, \"_\", function () { return $690246f0b6925227$export$d60067ff2358eee8; });\nfunction $690246f0b6925227$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $690246f0b6925227$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $690246f0b6925227$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $690246f0b6925227$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n});\n\n\nvar $guLUH = parcelRequire(\"guLUH\");\n\nvar $90XvN = parcelRequire(\"90XvN\");\n(function() {\n    /*\n   WooCommerce SkyVerge Payment Gateway Framework Payment Form CoffeeScript\n   Version 4.3.0-beta\n\n   Copyright (c) 2014-2023, SkyVerge, Inc.\n   Licensed under the GNU General Public License v3.0\n   http://www.gnu.org/licenses/gpl-3.0.html\n  */ var indexOf = [].indexOf;\n    jQuery(function($) {\n        \"use strict\";\n        window.SV_WC_Payment_Form_Handler_v5_12_1 = /*#__PURE__*/ function() {\n            function SV_WC_Payment_Form_Handler_v5_12_1(args) {\n                var _this = this;\n                (0, $guLUH._)(this, SV_WC_Payment_Form_Handler_v5_12_1);\n                this.id = args.id;\n                this.id_dasherized = args.id_dasherized;\n                this.plugin_id = args.plugin_id;\n                this.type = args.type;\n                this.csc_required = args.csc_required;\n                this.csc_required_for_tokens = args.csc_required_for_tokens;\n                this.enabled_card_types = args.enabled_card_types;\n                // which payment form?\n                if ($(\"form.checkout\").length) {\n                    this.form = $(\"form.checkout\");\n                    this.handle_checkout_page();\n                } else if ($(\"form#order_review\").length) {\n                    this.form = $(\"form#order_review\");\n                    this.handle_pay_page();\n                } else if ($(\"form#add_payment_method\").length) {\n                    this.form = $(\"form#add_payment_method\");\n                    this.handle_add_payment_method_page();\n                } else {\n                    console.log(\"No payment form found!\");\n                    return;\n                }\n                // localized error messages\n                this.params = window[\"sv_wc_payment_gateway_payment_form_params\"];\n                if (this.type === \"echeck\") // handle sample check image hint\n                this.form.on(\"click\", \".js-sv-wc-payment-gateway-echeck-form-check-hint, .js-sv-wc-payment-gateway-echeck-form-sample-check\", function() {\n                    return _this.handle_sample_check_hint();\n                });\n                $(document).trigger(\"sv_wc_payment_form_handler_init\", {\n                    id: this.id,\n                    instance: this\n                });\n            }\n            (0, $90XvN._)(SV_WC_Payment_Form_Handler_v5_12_1, [\n                {\n                    // Public: Handle required actions on the checkout page\n                    // Returns nothing.\n                    key: \"handle_checkout_page\",\n                    value: function handle_checkout_page() {\n                        var _this = this;\n                        if (this.type === \"credit-card\") // format/validate credit card inputs using jQuery.payment\n                        $(document.body).on(\"updated_checkout\", function() {\n                            return _this.format_credit_card_inputs();\n                        });\n                        // updated payment fields jQuery object on each checkout update (prevents stale data)\n                        $(document.body).on(\"updated_checkout\", function() {\n                            return _this.set_payment_fields();\n                        });\n                        // handle saved payment methods\n                        // note on the checkout page, this is bound to `updated_checkout` so it\n                        // fires even when other parts of the checkout are changed\n                        $(document.body).on(\"updated_checkout\", function() {\n                            return _this.handle_saved_payment_methods();\n                        });\n                        // validate payment data before order is submitted\n                        return this.form.on(\"checkout_place_order_\".concat(this.id), function() {\n                            return _this.validate_payment_data();\n                        });\n                    }\n                },\n                {\n                    // Public: Handle required actions on the Order > Pay page\n                    // Returns nothing.\n                    key: \"handle_pay_page\",\n                    value: function handle_pay_page() {\n                        var _this = this;\n                        this.set_payment_fields();\n                        // format/validate credit card inputs using jQuery.payment\n                        if (this.type === \"credit-card\") this.format_credit_card_inputs();\n                        // handle saved payment methods\n                        this.handle_saved_payment_methods();\n                        // validate payment data before order is submitted\n                        return this.form.submit(function() {\n                            if ($(\"#order_review input[name=payment_method]:checked\").val() === _this.id) // but only when one of our payment gateways is selected\n                            return _this.validate_payment_data();\n                        });\n                    }\n                },\n                {\n                    // Public: Handle required actions on the Add Payment Method page\n                    // Returns nothing.\n                    key: \"handle_add_payment_method_page\",\n                    value: function handle_add_payment_method_page() {\n                        var _this = this;\n                        this.set_payment_fields();\n                        // format/validate credit card inputs using jQuery.payment\n                        if (this.type === \"credit-card\") this.format_credit_card_inputs();\n                        // validate payment data before order is submitted\n                        return this.form.submit(function() {\n                            if ($(\"#add_payment_method input[name=payment_method]:checked\").val() === _this.id) // but only when one of our payment gateways is selected\n                            return _this.validate_payment_data();\n                        });\n                    }\n                },\n                {\n                    // Public: Set payment fields class variable, this is done\n                    // during the updated_checkout event as otherwise the reference to\n                    // the checkout fields becomes stale (somehow ¯\\_(ツ)_/¯)\n                    // This ensures payment fields are not marked as \"invalid\" before the customer has interacted with them.\n                    // Returns nothing.\n                    key: \"set_payment_fields\",\n                    value: function set_payment_fields() {\n                        var $required_fields;\n                        this.payment_fields = $(\".payment_method_\".concat(this.id));\n                        $required_fields = this.payment_fields.find(\".validate-required .input-text\");\n                        return $required_fields.each(function(i, input) {\n                            // if any of the required fields have a value, bail this loop and proceed with WooCommerce validation\n                            if ($(input).val()) return false;\n                            // otherwise remove all validation result classes from the inputs, since the form is freshly loaded\n                            return $(input).trigger(\"input\");\n                        });\n                    }\n                },\n                {\n                    // Public: Validate Payment data when order is placed\n                    // Returns boolean, true if payment data is valid, false otherwise\n                    key: \"validate_payment_data\",\n                    value: function validate_payment_data() {\n                        var handler, valid;\n                        if (this.form.is(\".processing\")) // bail when already processing\n                        return false;\n                        this.saved_payment_method_selected = this.payment_fields.find(\".js-sv-wc-payment-gateway-payment-token:checked\").val();\n                        // perform internal validations (all fields present & valid, etc)\n                        valid = this.type === \"credit-card\" ? this.validate_card_data() : this.validate_account_data();\n                        // let gateways perform their own validation prior to form submission\n                        handler = $(document.body).triggerHandler(\"sv_wc_payment_form_valid_payment_data\", {\n                            payment_form: this,\n                            passed_validation: valid\n                        }) !== false;\n                        return valid && handler;\n                    }\n                },\n                {\n                    // Public: format card data using jQuery.Payment\n                    // Returns nothing.\n                    key: \"format_credit_card_inputs\",\n                    value: function format_credit_card_inputs() {\n                        var _this = this;\n                        var $card_number, $csc, $expiry;\n                        $card_number = $(\".js-sv-wc-payment-gateway-credit-card-form-account-number\").payment(\"formatCardNumber\");\n                        $expiry = $(\".js-sv-wc-payment-gateway-credit-card-form-expiry\").payment(\"formatCardExpiry\");\n                        $csc = $(\".js-sv-wc-payment-gateway-credit-card-form-csc\").payment(\"formatCardCVC\");\n                        if ($card_number.val() && $card_number.val().length > 0) $card_number.trigger(\"change\");\n                        if ($expiry.val() && $expiry.val().length > 0) $expiry.trigger(\"change\");\n                        if ($csc.val() && $csc.val().length > 0) $csc.trigger(\"change\");\n                        // perform inline validation on credit card inputs\n                        return $(\".js-sv-wc-payment-gateway-credit-card-form-input\").on(\"change paste keyup\", function() {\n                            return _this.do_inline_credit_card_validation();\n                        });\n                    }\n                },\n                {\n                    // Public: perform inline validation on credit card fields\n                    // Returns nothing.\n                    key: \"do_inline_credit_card_validation\",\n                    value: function do_inline_credit_card_validation() {\n                        var $card_number, $card_type, $csc, $expiry;\n                        $card_number = $(\".js-sv-wc-payment-gateway-credit-card-form-account-number\");\n                        $expiry = $(\".js-sv-wc-payment-gateway-credit-card-form-expiry\");\n                        $csc = $(\".js-sv-wc-payment-gateway-credit-card-form-csc\");\n                        $card_type = $.payment.cardType($card_number.val());\n                        if (indexOf.call(this.enabled_card_types, $card_type) < 0) $card_number.addClass(\"invalid-card-type\");\n                        else $card_number.removeClass(\"invalid-card-type\");\n                        if ($.payment.validateCardExpiry($expiry.payment(\"cardExpiryVal\"))) $expiry.addClass(\"identified\");\n                        else $expiry.removeClass(\"identified\");\n                        if ($.payment.validateCardCVC($csc.val())) return $csc.addClass(\"identified\");\n                        else return $csc.removeClass(\"identified\");\n                    }\n                },\n                {\n                    // Public: Perform validation on the credit card info entered\n                    // Return boolean, true if credit card info is valid, false otherwise\n                    key: \"validate_card_data\",\n                    value: function validate_card_data() {\n                        var account_number, csc, errors, expiry;\n                        errors = [];\n                        csc = this.payment_fields.find(\".js-sv-wc-payment-gateway-credit-card-form-csc\").val();\n                        // always validate the CSC if present\n                        if (csc != null) {\n                            if (csc) {\n                                if (/\\D/.test(csc)) errors.push(this.params.cvv_digits_invalid);\n                                if (csc.length < 3 || csc.length > 4) errors.push(this.params.cvv_length_invalid);\n                            } else if (this.csc_required) {\n                                if (!this.saved_payment_method_selected || this.csc_required_for_tokens) errors.push(this.params.cvv_missing);\n                            }\n                        }\n                        // Only validate the other CC fields if necessary\n                        if (!this.saved_payment_method_selected) {\n                            account_number = this.payment_fields.find(\".js-sv-wc-payment-gateway-credit-card-form-account-number\").val();\n                            expiry = $.payment.cardExpiryVal(this.payment_fields.find(\".js-sv-wc-payment-gateway-credit-card-form-expiry\").val());\n                            // replace any dashes or spaces in the card number\n                            account_number = account_number.replace(/-|\\s/g, \"\");\n                            // validate card number\n                            if (!account_number) errors.push(this.params.card_number_missing);\n                            else {\n                                if (account_number.length < 12 || account_number.length > 19) errors.push(this.params.card_number_length_invalid);\n                                if (/\\D/.test(account_number)) errors.push(this.params.card_number_digits_invalid);\n                                if (!$.payment.validateCardNumber(account_number)) errors.push(this.params.card_number_invalid);\n                            }\n                            if (!$.payment.validateCardExpiry(expiry)) // validate expiration date\n                            errors.push(this.params.card_exp_date_invalid);\n                        }\n                        if (errors.length > 0) {\n                            this.render_errors(errors);\n                            return false;\n                        } else {\n                            // get rid of any space/dash characters\n                            this.payment_fields.find(\".js-sv-wc-payment-gateway-credit-card-form-account-number\").val(account_number);\n                            return true;\n                        }\n                    }\n                },\n                {\n                    // Public: Perform validation on the eCheck info entered\n                    // Return boolean, true if eCheck info is valid, false otherwise\n                    key: \"validate_account_data\",\n                    value: function validate_account_data() {\n                        var account_number, errors, routing_number;\n                        if (this.saved_payment_method_selected) return true;\n                        errors = [];\n                        routing_number = this.payment_fields.find(\".js-sv-wc-payment-gateway-echeck-form-routing-number\").val();\n                        account_number = this.payment_fields.find(\".js-sv-wc-payment-gateway-echeck-form-account-number\").val();\n                        // validate routing number\n                        if (!routing_number) errors.push(this.params.routing_number_missing);\n                        else {\n                            if (9 !== routing_number.length) errors.push(this.params.routing_number_length_invalid);\n                            if (/\\D/.test(routing_number)) errors.push(this.params.routing_number_digits_invalid);\n                        }\n                        // validate account number\n                        if (!account_number) errors.push(this.params.account_number_missing);\n                        else {\n                            if (account_number.length < 3 || account_number.length > 17) errors.push(this.params.account_number_length_invalid);\n                            if (/\\D/.test(account_number)) errors.push(this.params.account_number_invalid);\n                        }\n                        if (errors.length > 0) {\n                            this.render_errors(errors);\n                            return false;\n                        } else {\n                            // get rid of any space/dash characters\n                            this.payment_fields.find(\".js-sv-wc-payment-gateway-echeck-form-account-number\").val(account_number);\n                            return true;\n                        }\n                    }\n                },\n                {\n                    // Public: Render any new errors and bring them into the viewport\n                    // Returns nothing.\n                    key: \"render_errors\",\n                    value: function render_errors(errors) {\n                        // hide and remove any previous errors\n                        $(\".woocommerce-error, .woocommerce-message\").remove();\n                        // add errors\n                        this.form.prepend('<ul class=\"woocommerce-error\"><li>' + errors.join(\"</li><li>\") + \"</li></ul>\");\n                        // unblock UI\n                        this.form.removeClass(\"processing\").unblock();\n                        this.form.find(\".input-text, select\").blur();\n                        // scroll to top\n                        return $(\"html, body\").animate({\n                            scrollTop: this.form.offset().top - 100\n                        }, 1000);\n                    }\n                },\n                {\n                    // Public: Handle associated actions for saved payment methods\n                    // Returns nothing.\n                    key: \"handle_saved_payment_methods\",\n                    value: function handle_saved_payment_methods() {\n                        var $csc_field, $new_payment_method_selection, csc_required, csc_required_for_tokens, id_dasherized;\n                        // make available inside change events\n                        id_dasherized = this.id_dasherized;\n                        csc_required = this.csc_required;\n                        csc_required_for_tokens = this.csc_required_for_tokens;\n                        $new_payment_method_selection = $(\"div.js-wc-\".concat(id_dasherized, \"-new-payment-method-form\"));\n                        $csc_field = $new_payment_method_selection.find(\".js-sv-wc-payment-gateway-credit-card-form-csc\").closest(\".form-row\");\n                        // show/hide the saved payment methods when a saved payment method is de-selected/selected\n                        $(\"input.js-wc-\".concat(this.id_dasherized, \"-payment-token\")).on(\"change\", function() {\n                            var tokenized_payment_method_selected;\n                            tokenized_payment_method_selected = $(\"input.js-wc-\".concat(id_dasherized, \"-payment-token:checked\")).val();\n                            if (tokenized_payment_method_selected) {\n                                // using an existing tokenized payment method, hide the 'new method' fields\n                                $new_payment_method_selection.slideUp(200);\n                                // move the CSC field out of the 'new method' fields so it can be used with the tokenized transaction\n                                if (csc_required_for_tokens) {\n                                    $csc_field.removeClass(\"form-row-last\").addClass(\"form-row-first\");\n                                    return $new_payment_method_selection.after($csc_field);\n                                }\n                            } else {\n                                // use new payment method, display the 'new method' fields\n                                $new_payment_method_selection.slideDown(200);\n                                // move the CSC field back into its regular spot\n                                if (csc_required_for_tokens) {\n                                    $csc_field.removeClass(\"form-row-first\").addClass(\"form-row-last\");\n                                    return $new_payment_method_selection.find(\".js-sv-wc-payment-gateway-credit-card-form-expiry\").closest(\".form-row\").after($csc_field);\n                                }\n                            }\n                        }).change();\n                        // display the 'save payment method' option for guest checkouts if the 'create account' option is checked\n                        //  but only hide the input if there is a 'create account' checkbox (some themes just display the password)\n                        $(\"input#createaccount\").on(\"change\", function() {\n                            var $parent_row;\n                            $parent_row = $(\"input.js-wc-\".concat(id_dasherized, \"-tokenize-payment-method\")).closest(\"p.form-row\");\n                            if ($(this).is(\":checked\")) {\n                                $parent_row.slideDown();\n                                return $parent_row.next().show();\n                            } else {\n                                $parent_row.hide();\n                                return $parent_row.next().hide();\n                            }\n                        });\n                        if (!$(\"input#createaccount\").is(\":checked\")) return $(\"input#createaccount\").change();\n                    }\n                },\n                {\n                    // Public: Handle showing/hiding the sample check image\n                    // Returns nothing.\n                    key: \"handle_sample_check_hint\",\n                    value: function handle_sample_check_hint() {\n                        var $sample_check;\n                        $sample_check = this.payment_fields.find(\".js-sv-wc-payment-gateway-echeck-form-sample-check\");\n                        if ($sample_check.is(\":visible\")) return $sample_check.slideUp();\n                        else return $sample_check.slideDown();\n                    }\n                },\n                {\n                    // Blocks the payment form UI\n                    // @since 3.0.0\n                    key: \"block_ui\",\n                    value: function block_ui() {\n                        return this.form.block({\n                            message: null,\n                            overlayCSS: {\n                                background: \"#fff\",\n                                opacity: 0.6\n                            }\n                        });\n                    }\n                },\n                {\n                    // Unblocks the payment form UI\n                    // @since 3.0.0\n                    key: \"unblock_ui\",\n                    value: function unblock_ui() {\n                        return this.form.unblock();\n                    }\n                }\n            ]);\n            return SV_WC_Payment_Form_Handler_v5_12_1;\n        }();\n        // dispatch loaded event\n        return $(document.body).trigger(\"sv_wc_payment_form_handler_v5_12_1_loaded\");\n    });\n}).call(undefined);\n\n\n//# sourceMappingURL=sv-wc-payment-gateway-payment-form.js.map\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","###\n WooCommerce SkyVerge Payment Gateway Framework Payment Form CoffeeScript\n Version 4.3.0-beta\n\n Copyright (c) 2014-2023, SkyVerge, Inc.\n Licensed under the GNU General Public License v3.0\n http://www.gnu.org/licenses/gpl-3.0.html\n###\njQuery ( $ ) ->\n\t\"use strict\"\n\n\n\tclass window.SV_WC_Payment_Form_Handler_v5_12_1\n\n\n\t\t# Public: Instantiate Payment Form Handler\n\t\t#\n\t\t# args - object with properties:\n\t\t#   id - gateway ID\n\t\t#   id_dasherized - gateway ID dasherized\n\t\t#   plugin_id - plugin ID\n\t\t#   type - gateway type, either `credit-card` or `echeck`\n\t\t#   csc_required - true if the gateway requires the CSC field to be displayed\n\t\t#\n\t\t# Returns SV_WC_Payment_Form_Handler_v5_12_1 instance\n\t\tconstructor: (args) ->\n\n\t\t\t@id                      = args.id\n\t\t\t@id_dasherized           = args.id_dasherized\n\t\t\t@plugin_id               = args.plugin_id\n\t\t\t@type                    = args.type\n\t\t\t@csc_required            = args.csc_required\n\t\t\t@csc_required_for_tokens = args.csc_required_for_tokens\n\t\t\t@enabled_card_types      = args.enabled_card_types\n\n\t\t\t# which payment form?\n\t\t\tif $( 'form.checkout' ).length\n\t\t\t\t@form = $( 'form.checkout' )\n\t\t\t\tthis.handle_checkout_page()\n\n\t\t\telse if $( 'form#order_review' ).length\n\t\t\t\t@form = $( 'form#order_review' )\n\t\t\t\tthis.handle_pay_page()\n\n\t\t\telse if $( 'form#add_payment_method' ).length\n\t\t\t\t@form = $( 'form#add_payment_method' )\n\t\t\t\tthis.handle_add_payment_method_page()\n\n\t\t\telse\n\t\t\t\tconsole.log( 'No payment form found!' )\n\t\t\t\treturn\n\n\t\t\t# localized error messages\n\t\t\t@params = window[ \"sv_wc_payment_gateway_payment_form_params\" ]\n\n\t\t\t# handle sample check image hint\n\t\t\t@form.on( 'click', '.js-sv-wc-payment-gateway-echeck-form-check-hint, .js-sv-wc-payment-gateway-echeck-form-sample-check', => this.handle_sample_check_hint() ) if @type is 'echeck'\n\n\t\t\t$( document ).trigger( 'sv_wc_payment_form_handler_init', { id: @id, instance: @ } )\n\n\n\t\t# Public: Handle required actions on the checkout page\n\t\t#\n\t\t# Returns nothing.\n\t\thandle_checkout_page: ->\n\n\t\t\t# format/validate credit card inputs using jQuery.payment\n\t\t\t$( document.body ).on( 'updated_checkout', => this.format_credit_card_inputs() ) if @type is 'credit-card'\n\n\t\t\t# updated payment fields jQuery object on each checkout update (prevents stale data)\n\t\t\t$( document.body ).on( 'updated_checkout', => this.set_payment_fields() )\n\n\t\t\t# handle saved payment methods\n\t\t\t# note on the checkout page, this is bound to `updated_checkout` so it\n\t\t\t# fires even when other parts of the checkout are changed\n\t\t\t$( document.body ).on( 'updated_checkout', => this.handle_saved_payment_methods() )\n\n\t\t\t# validate payment data before order is submitted\n\t\t\t@form.on( \"checkout_place_order_#{ @id }\", => this.validate_payment_data() )\n\n\n\t\t# Public: Handle required actions on the Order > Pay page\n\t\t#\n\t\t# Returns nothing.\n\t\thandle_pay_page: ->\n\n\t\t\tthis.set_payment_fields()\n\n\t\t\t# format/validate credit card inputs using jQuery.payment\n\t\t\tif @type is 'credit-card'\n\t\t\t\tthis.format_credit_card_inputs()\n\n\t\t\t# handle saved payment methods\n\t\t\tthis.handle_saved_payment_methods()\n\n\t\t\t# validate payment data before order is submitted\n\t\t\t@form.submit =>\n\n\t\t\t\t# but only when one of our payment gateways is selected\n\t\t\t\treturn this.validate_payment_data() if $( '#order_review input[name=payment_method]:checked' ).val() is @id\n\n\n\t\t# Public: Handle required actions on the Add Payment Method page\n\t\t#\n\t\t# Returns nothing.\n\t\thandle_add_payment_method_page: ->\n\n\t\t\tthis.set_payment_fields()\n\n\t\t\t# format/validate credit card inputs using jQuery.payment\n\t\t\tif @type is 'credit-card'\n\t\t\t\tthis.format_credit_card_inputs()\n\n\t\t\t# validate payment data before order is submitted\n\t\t\t@form.submit =>\n\n\t\t\t\t# but only when one of our payment gateways is selected\n\t\t\t\treturn this.validate_payment_data() if $( '#add_payment_method input[name=payment_method]:checked' ).val() is @id\n\n\n\t\t# Public: Set payment fields class variable, this is done\n\t\t# during the updated_checkout event as otherwise the reference to\n\t\t# the checkout fields becomes stale (somehow ¯\\_(ツ)_/¯)\n\t\t#\n\t\t# This ensures payment fields are not marked as \"invalid\" before the customer has interacted with them.\n\t\t#\n\t\t# Returns nothing.\n\t\tset_payment_fields: ->\n\n\t\t\t@payment_fields = $( \".payment_method_#{ @id }\" )\n\n\t\t\t$required_fields = @payment_fields.find( '.validate-required .input-text' )\n\n\t\t\t$required_fields.each( ( i, input ) =>\n\n\t\t\t\t# if any of the required fields have a value, bail this loop and proceed with WooCommerce validation\n\t\t\t\tif $( input ).val()\n\t\t\t\t\treturn false\n\n\t\t\t\t# otherwise remove all validation result classes from the inputs, since the form is freshly loaded\n\t\t\t\t$( input ).trigger( 'input' )\n\t\t\t)\n\n\n\t\t# Public: Validate Payment data when order is placed\n\t\t#\n\t\t# Returns boolean, true if payment data is valid, false otherwise\n\t\tvalidate_payment_data: ->\n\n\t\t\t# bail when already processing\n\t\t\treturn false if @form.is( '.processing' )\n\n\t\t\t@saved_payment_method_selected = @payment_fields.find( '.js-sv-wc-payment-gateway-payment-token:checked' ).val()\n\n\t\t\t# perform internal validations (all fields present & valid, etc)\n\t\t\tvalid = if @type is 'credit-card' then this.validate_card_data() else this.validate_account_data()\n\n\t\t\t# let gateways perform their own validation prior to form submission\n\t\t\thandler = $( document.body ).triggerHandler( 'sv_wc_payment_form_valid_payment_data', { payment_form: this, passed_validation: valid } ) isnt false\n\n\t\t\treturn valid && handler\n\n\n\t\t# Public: format card data using jQuery.Payment\n\t\t#\n\t\t# Returns nothing.\n\t\tformat_credit_card_inputs: ->\n\t\t\t$card_number = $('.js-sv-wc-payment-gateway-credit-card-form-account-number').payment('formatCardNumber');\n\t\t\t$expiry      = $('.js-sv-wc-payment-gateway-credit-card-form-expiry').payment('formatCardExpiry');\n\t\t\t$csc         = $('.js-sv-wc-payment-gateway-credit-card-form-csc').payment('formatCardCVC');\n\n\t\t\t# trigger a 'change' event for non empty fields only\n\t\t\t$card_number.trigger( 'change') if $card_number.val() && $card_number.val().length > 0\n\t\t\t$expiry.trigger( 'change') if $expiry.val() && $expiry.val().length > 0\n\t\t\t$csc.trigger( 'change') if $csc.val() && $csc.val().length > 0\n\n\t\t\t# perform inline validation on credit card inputs\n\t\t\t$( '.js-sv-wc-payment-gateway-credit-card-form-input' ).on( 'change paste keyup', => this.do_inline_credit_card_validation() )\n\n\n\t\t# Public: perform inline validation on credit card fields\n\t\t#\n\t\t# Returns nothing.\n\t\tdo_inline_credit_card_validation: ->\n\n\t\t\t$card_number = $( '.js-sv-wc-payment-gateway-credit-card-form-account-number' )\n\t\t\t$expiry      = $( '.js-sv-wc-payment-gateway-credit-card-form-expiry' )\n\t\t\t$csc         = $( '.js-sv-wc-payment-gateway-credit-card-form-csc' )\n\n\t\t\t$card_type = $.payment.cardType( $card_number.val() )\n\n\t\t\tif $card_type not in @enabled_card_types\n\t\t\t\t$card_number.addClass( 'invalid-card-type' )\n\t\t\telse\n\t\t\t\t$card_number.removeClass( 'invalid-card-type' )\n\n\t\t\tif $.payment.validateCardExpiry( $expiry.payment( 'cardExpiryVal' ) )\n\t\t\t\t$expiry.addClass( 'identified' )\n\t\t\telse\n\t\t\t\t$expiry.removeClass( 'identified' )\n\n\t\t\tif $.payment.validateCardCVC( $csc.val() )\n\t\t\t\t$csc.addClass( 'identified' )\n\t\t\telse\n\t\t\t\t$csc.removeClass( 'identified' )\n\n\n\t\t# Public: Perform validation on the credit card info entered\n\t\t#\n\t\t# Return boolean, true if credit card info is valid, false otherwise\n\t\tvalidate_card_data: ->\n\n\t\t\terrors = []\n\n\t\t\tcsc = @payment_fields.find( '.js-sv-wc-payment-gateway-credit-card-form-csc' ).val()\n\n\t\t\t# always validate the CSC if present\n\t\t\tif csc?\n\n\t\t\t\tif csc\n\t\t\t\t\terrors.push( @params.cvv_digits_invalid ) if /\\D/.test( csc )\n\t\t\t\t\terrors.push( @params.cvv_length_invalid ) if csc.length < 3 || csc.length > 4\n\t\t\t\telse if @csc_required\n\t\t\t\t\tif not @saved_payment_method_selected or @csc_required_for_tokens\n\t\t\t\t\t\terrors.push( @params.cvv_missing )\n\n\t\t\t# Only validate the other CC fields if necessary\n\t\t\tif not @saved_payment_method_selected\n\n\t\t\t\taccount_number = @payment_fields.find( '.js-sv-wc-payment-gateway-credit-card-form-account-number' ).val()\n\t\t\t\texpiry         = $.payment.cardExpiryVal( @payment_fields.find( '.js-sv-wc-payment-gateway-credit-card-form-expiry' ).val() )\n\n\t\t\t\t# replace any dashes or spaces in the card number\n\t\t\t\taccount_number = account_number.replace( /-|\\s/g, '' )\n\n\t\t\t\t# validate card number\n\t\t\t\tif not account_number\n\t\t\t\t\terrors.push( @params.card_number_missing )\n\t\t\t\telse\n\t\t\t\t\terrors.push( @params.card_number_length_invalid ) if account_number.length < 12 || account_number.length > 19\n\t\t\t\t\terrors.push( @params.card_number_digits_invalid ) if /\\D/.test( account_number )\n\t\t\t\t\terrors.push( @params.card_number_invalid ) unless $.payment.validateCardNumber( account_number ) # performs luhn check\n\n\t\t\t\t# validate expiration date\n\t\t\t\terrors.push( @params.card_exp_date_invalid ) unless $.payment.validateCardExpiry( expiry ) # validates future date\n\n\t\t\tif errors.length > 0\n\t\t\t\tthis.render_errors( errors )\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\t# get rid of any space/dash characters\n\t\t\t\t@payment_fields.find( '.js-sv-wc-payment-gateway-credit-card-form-account-number' ).val( account_number )\n\t\t\t\treturn true\n\n\n\t\t# Public: Perform validation on the eCheck info entered\n\t\t#\n\t\t# Return boolean, true if eCheck info is valid, false otherwise\n\t\tvalidate_account_data: ->\n\n\t\t\treturn true if @saved_payment_method_selected\n\n\t\t\terrors = []\n\n\t\t\trouting_number = @payment_fields.find('.js-sv-wc-payment-gateway-echeck-form-routing-number').val()\n\t\t\taccount_number = @payment_fields.find('.js-sv-wc-payment-gateway-echeck-form-account-number').val()\n\n\t\t\t# validate routing number\n\t\t\tif not routing_number\n\t\t\t\terrors.push( @params.routing_number_missing )\n\t\t\telse\n\t\t\t\terrors.push( @params.routing_number_length_invalid ) if 9 != routing_number.length\n\t\t\t\terrors.push( @params.routing_number_digits_invalid ) if /\\D/.test( routing_number )\n\n\t\t\t# validate account number\n\t\t\tif not account_number\n\t\t\t\terrors.push( @params.account_number_missing )\n\t\t\telse\n\t\t\t\terrors.push( @params.account_number_length_invalid ) if account_number.length < 3 || account_number.length > 17\n\t\t\t\terrors.push( @params.account_number_invalid ) if /\\D/.test( account_number )\n\n\t\t\tif errors.length > 0\n\t\t\t\tthis.render_errors( errors )\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\t# get rid of any space/dash characters\n\t\t\t\t@payment_fields.find( '.js-sv-wc-payment-gateway-echeck-form-account-number' ).val( account_number )\n\t\t\t\treturn true\n\n\n\t\t# Public: Render any new errors and bring them into the viewport\n\t\t#\n\t\t# Returns nothing.\n\t\trender_errors: (errors) ->\n\n\t\t\t# hide and remove any previous errors\n\t\t\t$( '.woocommerce-error, .woocommerce-message' ).remove()\n\n\t\t\t# add errors\n\t\t\t@form.prepend '<ul class=\"woocommerce-error\"><li>' + errors.join( '</li><li>' ) + '</li></ul>'\n\n\t\t\t# unblock UI\n\t\t\t@form.removeClass( 'processing' ).unblock()\n\t\t\t@form.find( '.input-text, select' ).blur()\n\n\t\t\t# scroll to top\n\t\t\t$( 'html, body' ).animate( { scrollTop: @form.offset().top - 100 }, 1000 )\n\n\n\t\t# Public: Handle associated actions for saved payment methods\n\t\t#\n\t\t# Returns nothing.\n\t\thandle_saved_payment_methods: ->\n\n\t\t\t# make available inside change events\n\t\t\tid_dasherized = @id_dasherized\n\n\t\t\tcsc_required             = @csc_required\n\t\t\tcsc_required_for_tokens  = @csc_required_for_tokens\n\n\t\t\t$new_payment_method_selection = $( \"div.js-wc-#{ id_dasherized }-new-payment-method-form\" )\n\t\t\t$csc_field = $new_payment_method_selection.find( '.js-sv-wc-payment-gateway-credit-card-form-csc' ).closest( '.form-row' )\n\n\t\t\t# show/hide the saved payment methods when a saved payment method is de-selected/selected\n\t\t\t$( \"input.js-wc-#{ @id_dasherized }-payment-token\" ).on 'change', ->\n\n\t\t\t\ttokenized_payment_method_selected = $( \"input.js-wc-#{ id_dasherized }-payment-token:checked\" ).val()\n\n\t\t\t\tif tokenized_payment_method_selected\n\n\t\t\t\t\t# using an existing tokenized payment method, hide the 'new method' fields\n\t\t\t\t\t$new_payment_method_selection.slideUp( 200 )\n\n\t\t\t\t\t# move the CSC field out of the 'new method' fields so it can be used with the tokenized transaction\n\t\t\t\t\tif csc_required_for_tokens\n\t\t\t\t\t\t$csc_field.removeClass( 'form-row-last' ).addClass( 'form-row-first' )\n\t\t\t\t\t\t$new_payment_method_selection.after( $csc_field )\n\n\t\t\t\telse\n\t\t\t\t\t# use new payment method, display the 'new method' fields\n\t\t\t\t\t$new_payment_method_selection.slideDown( 200 )\n\n\t\t\t\t\t# move the CSC field back into its regular spot\n\t\t\t\t\tif csc_required_for_tokens\n\t\t\t\t\t\t$csc_field.removeClass( 'form-row-first' ).addClass( 'form-row-last' )\n\t\t\t\t\t\t$new_payment_method_selection.find( '.js-sv-wc-payment-gateway-credit-card-form-expiry' ).closest( '.form-row' ).after( $csc_field )\n\t\t\t.change()\n\n\t\t\t# display the 'save payment method' option for guest checkouts if the 'create account' option is checked\n\t\t\t#  but only hide the input if there is a 'create account' checkbox (some themes just display the password)\n\t\t\t$( 'input#createaccount' ).on 'change', ->\n\t\t\t\t$parent_row = $( \"input.js-wc-#{ id_dasherized }-tokenize-payment-method\" ).closest( 'p.form-row' )\n\n\t\t\t\tif $( this ).is( ':checked' )\n\t\t\t\t\t$parent_row.slideDown()\n\t\t\t\t\t$parent_row.next().show()\n\t\t\t\telse\n\t\t\t\t\t$parent_row.hide()\n\t\t\t\t\t$parent_row.next().hide()\n\n\t\t\t$( 'input#createaccount' ).change() unless $( 'input#createaccount' ).is( ':checked' )\n\n\n\t\t# Public: Handle showing/hiding the sample check image\n\t\t#\n\t\t# Returns nothing.\n\t\thandle_sample_check_hint: ->\n\n\t\t\t$sample_check = @payment_fields.find( '.js-sv-wc-payment-gateway-echeck-form-sample-check' )\n\n\t\t\tif $sample_check.is( \":visible\" ) then $sample_check.slideUp() else $sample_check.slideDown()\n\n\n\n\t\t# Blocks the payment form UI\n\t\t#\n\t\t# @since 3.0.0\n\t\tblock_ui: -> @form.block( message: null, overlayCSS: background: '#fff',opacity: 0.6 )\n\n\n\t\t# Unblocks the payment form UI\n\t\t#\n\t\t# @since 3.0.0\n\t\tunblock_ui: -> @form.unblock()\n\n\n\t# dispatch loaded event\n\t$( document.body ).trigger( \"sv_wc_payment_form_handler_v5_12_1_loaded\" )\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$c0249d4a3fc9bb83$export$2996f80ef42b8419","instance","Constructor","TypeError","$690246f0b6925227$var$_defineProperties","target","props","i","length","descriptor","writable","key","$690246f0b6925227$export$d60067ff2358eee8","protoProps","staticProps","prototype","$guLUH","$90XvN","indexOf","jQuery","$","SV_WC_Payment_Form_Handler_v5_12_1","args","_this","_","id_dasherized","plugin_id","type","csc_required","csc_required_for_tokens","enabled_card_types","form","handle_checkout_page","handle_pay_page","handle_add_payment_method_page","console","log","params","on","handle_sample_check_hint","document","trigger","value","body","format_credit_card_inputs","set_payment_fields","handle_saved_payment_methods","concat","validate_payment_data","submit","val","payment_fields","$required_fields","find","each","input","handler","valid","is","saved_payment_method_selected","validate_card_data","validate_account_data","triggerHandler","payment_form","passed_validation","$card_number","$csc","$expiry","payment","do_inline_credit_card_validation","$card_type","cardType","addClass","removeClass","validateCardExpiry","validateCardCVC","account_number","csc","errors","expiry","test","push","cvv_digits_invalid","cvv_length_invalid","cvv_missing","cardExpiryVal","replace","card_number_length_invalid","card_number_digits_invalid","validateCardNumber","card_number_invalid","card_number_missing","card_exp_date_invalid","render_errors","routing_number","routing_number_length_invalid","routing_number_digits_invalid","routing_number_missing","account_number_length_invalid","account_number_invalid","account_number_missing","remove","prepend","join","unblock","blur","animate","scrollTop","offset","top","$csc_field","$new_payment_method_selection","closest","slideUp","after","slideDown","change","$parent_row","next","show","hide","$sample_check","block","message","overlayCSS","background","opacity","undefined"],"version":3,"file":"sv-wc-payment-gateway-payment-form.js.map","sourceRoot":"../../../../../"}